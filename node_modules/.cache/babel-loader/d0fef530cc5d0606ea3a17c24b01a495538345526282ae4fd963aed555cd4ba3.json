{"ast":null,"code":"import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nconst errorMessages = {\n  error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n  error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n  error003: nodeType => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n  error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n  error005: () => 'Only child nodes can use a parent extent.',\n  error006: () => \"Can't create edge. An edge needs a source and a target.\",\n  error007: id => `The old edge with id=${id} does not exist.`,\n  error009: type => `Marker type \"${type}\" doesn't exist.`,\n  error008: (handleType, _ref) => {\n    let {\n      id,\n      sourceHandle,\n      targetHandle\n    } = _ref;\n    return `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`;\n  },\n  error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n  error011: edgeType => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n  error012: id => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n  error013: function () {\n    let lib = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'react';\n    return `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`;\n  }\n};\nconst infiniteExtent = [[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY], [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\nvar ConnectionMode;\n(function (ConnectionMode) {\n  ConnectionMode[\"Strict\"] = \"strict\";\n  ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n  PanOnScrollMode[\"Free\"] = \"free\";\n  PanOnScrollMode[\"Vertical\"] = \"vertical\";\n  PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n  SelectionMode[\"Partial\"] = \"partial\";\n  SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n  inProgress: false,\n  isValid: null,\n  from: null,\n  fromHandle: null,\n  fromPosition: null,\n  fromNode: null,\n  to: null,\n  toHandle: null,\n  toPosition: null,\n  toNode: null\n};\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n  ConnectionLineType[\"Bezier\"] = \"default\";\n  ConnectionLineType[\"Straight\"] = \"straight\";\n  ConnectionLineType[\"Step\"] = \"step\";\n  ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n  ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n  MarkerType[\"Arrow\"] = \"arrow\";\n  MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\nvar Position;\n(function (Position) {\n  Position[\"Left\"] = \"left\";\n  Position[\"Top\"] = \"top\";\n  Position[\"Right\"] = \"right\";\n  Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n  [Position.Left]: Position.Right,\n  [Position.Right]: Position.Left,\n  [Position.Top]: Position.Bottom,\n  [Position.Bottom]: Position.Top\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b || a.size !== b.size) {\n    return false;\n  }\n  if (!a.size && !b.size) {\n    return true;\n  }\n  for (const key of a.keys()) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n  if (!cb) {\n    return;\n  }\n  const diff = [];\n  a.forEach((connection, key) => {\n    if (!b?.has(key)) {\n      diff.push(connection);\n    }\n  });\n  if (diff.length) {\n    cb(diff);\n  }\n}\nfunction getConnectionStatus(isValid) {\n  return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is useable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = element => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is useable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = element => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = element => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * Pass in a node, and get connected nodes where edge.source === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the source is the given node\n */\nconst getOutgoers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const outgoerIds = new Set();\n  edges.forEach(edge => {\n    if (edge.source === node.id) {\n      outgoerIds.add(edge.target);\n    }\n  });\n  return nodes.filter(n => outgoerIds.has(n.id));\n};\n/**\n * Pass in a node, and get connected nodes where edge.target === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the target is the given node\n */\nconst getIncomers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const incomersIds = new Set();\n  edges.forEach(edge => {\n    if (edge.target === node.id) {\n      incomersIds.add(edge.source);\n    }\n  });\n  return nodes.filter(n => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = function (node) {\n  let nodeOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];\n  const {\n    width,\n    height\n  } = getNodeDimensions(node);\n  const origin = node.origin ?? nodeOrigin;\n  const offsetX = width * origin[0];\n  const offsetY = height * origin[1];\n  return {\n    x: node.position.x - offsetX,\n    y: node.position.y - offsetY\n  };\n};\n/**\n * Internal function for determining a bounding box that contains all given nodes in an array.\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\n * @returns Bounding box enclosing all nodes\n */\nconst getNodesBounds = function (nodes) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    nodeOrigin: [0, 0],\n    nodeLookup: undefined\n  };\n  if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\n    console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\n  }\n  if (nodes.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const box = nodes.reduce((currBox, nodeOrId) => {\n    const isId = typeof nodeOrId === 'string';\n    let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\n    if (params.nodeLookup) {\n      currentNode = isId ? params.nodeLookup.get(nodeOrId) : !isInternalNodeBase(nodeOrId) ? params.nodeLookup.get(nodeOrId.id) : nodeOrId;\n    }\n    const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : {\n      x: 0,\n      y: 0,\n      x2: 0,\n      y2: 0\n    };\n    return getBoundsOfBoxes(currBox, nodeBox);\n  }, {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  });\n  return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = function (nodeLookup) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (nodeLookup.size === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  let box = {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  };\n  nodeLookup.forEach(node => {\n    if (params.filter === undefined || params.filter(node)) {\n      const nodeBox = nodeToBox(node);\n      box = getBoundsOfBoxes(box, nodeBox);\n    }\n  });\n  return boxToRect(box);\n};\nconst getNodesInside = function (nodes, rect) {\n  let [tx, ty, tScale] = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0, 1];\n  let partially = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let excludeNonSelectableNodes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  const paneRect = {\n    ...pointToRendererPoint(rect, [tx, ty, tScale]),\n    width: rect.width / tScale,\n    height: rect.height / tScale\n  };\n  const visibleNodes = [];\n  for (const node of nodes.values()) {\n    const {\n      measured,\n      selectable = true,\n      hidden = false\n    } = node;\n    if (excludeNonSelectableNodes && !selectable || hidden) {\n      continue;\n    }\n    const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n    const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n    const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n    const area = (width ?? 0) * (height ?? 0);\n    const partiallyVisible = partially && overlappingArea > 0;\n    const forceInitialRender = !node.internals.handleBounds;\n    const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\n    if (isVisible || node.dragging) {\n      visibleNodes.push(node);\n    }\n  }\n  return visibleNodes;\n};\n/**\n * Get all connecting edges for a given set of nodes\n * @param nodes - Nodes you want to get the connected edges for\n * @param edges - All edges\n * @returns Array of edges that connect any of the given nodes with each other\n */\nconst getConnectedEdges = (nodes, edges) => {\n  const nodeIds = new Set();\n  nodes.forEach(node => {\n    nodeIds.add(node.id);\n  });\n  return edges.filter(edge => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n  const fitViewNodes = new Map();\n  const optionNodeIds = options?.nodes ? new Set(options.nodes.map(node => node.id)) : null;\n  nodeLookup.forEach(n => {\n    const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n    if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n      fitViewNodes.set(n.id, n);\n    }\n  });\n  return fitViewNodes;\n}\nasync function fitView(_ref2, options) {\n  let {\n    nodes,\n    width,\n    height,\n    panZoom,\n    minZoom,\n    maxZoom\n  } = _ref2;\n  if (nodes.size === 0) {\n    return Promise.resolve(false);\n  }\n  const bounds = getInternalNodesBounds(nodes);\n  const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n  await panZoom.setViewport(viewport, {\n    duration: options?.duration\n  });\n  return Promise.resolve(true);\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition(_ref3) {\n  let {\n    nodeId,\n    nextPosition,\n    nodeLookup,\n    nodeOrigin = [0, 0],\n    nodeExtent,\n    onError\n  } = _ref3;\n  const node = nodeLookup.get(nodeId);\n  const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode ? parentNode.internals.positionAbsolute : {\n    x: 0,\n    y: 0\n  };\n  const origin = node.origin ?? nodeOrigin;\n  let extent = nodeExtent;\n  if (node.extent === 'parent' && !node.expandParent) {\n    if (!parentNode) {\n      onError?.('005', errorMessages['error005']());\n    } else {\n      const parentWidth = parentNode.measured.width;\n      const parentHeight = parentNode.measured.height;\n      if (parentWidth && parentHeight) {\n        extent = [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]];\n      }\n    }\n  } else if (parentNode && isCoordinateExtent(node.extent)) {\n    extent = [[node.extent[0][0] + parentX, node.extent[0][1] + parentY], [node.extent[1][0] + parentX, node.extent[1][1] + parentY]];\n  }\n  const positionAbsolute = isCoordinateExtent(extent) ? clampPosition(nextPosition, extent, node.measured) : nextPosition;\n  return {\n    position: {\n      x: positionAbsolute.x - parentX + node.measured.width * origin[0],\n      y: positionAbsolute.y - parentY + node.measured.height * origin[1]\n    },\n    positionAbsolute\n  };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove(_ref4) {\n  let {\n    nodesToRemove = [],\n    edgesToRemove = [],\n    nodes,\n    edges,\n    onBeforeDelete\n  } = _ref4;\n  const nodeIds = new Set(nodesToRemove.map(node => node.id));\n  const matchingNodes = [];\n  for (const node of nodes) {\n    if (node.deletable === false) {\n      continue;\n    }\n    const isIncluded = nodeIds.has(node.id);\n    const parentHit = !isIncluded && node.parentId && matchingNodes.find(n => n.id === node.parentId);\n    if (isIncluded || parentHit) {\n      matchingNodes.push(node);\n    }\n  }\n  const edgeIds = new Set(edgesToRemove.map(edge => edge.id));\n  const deletableEdges = edges.filter(edge => edge.deletable !== false);\n  const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n  const matchingEdges = connectedEdges;\n  for (const edge of deletableEdges) {\n    const isIncluded = edgeIds.has(edge.id);\n    if (isIncluded && !matchingEdges.find(e => e.id === edge.id)) {\n      matchingEdges.push(edge);\n    }\n  }\n  if (!onBeforeDelete) {\n    return {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    };\n  }\n  const onBeforeDeleteResult = await onBeforeDelete({\n    nodes: matchingNodes,\n    edges: matchingEdges\n  });\n  if (typeof onBeforeDeleteResult === 'boolean') {\n    return onBeforeDeleteResult ? {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    } : {\n      edges: [],\n      nodes: []\n    };\n  }\n  return onBeforeDeleteResult;\n}\nconst clamp = function (val) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return Math.min(Math.max(val, min), max);\n};\nconst clampPosition = function () {\n  let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    x: 0,\n    y: 0\n  };\n  let extent = arguments.length > 1 ? arguments[1] : undefined;\n  let dimensions = arguments.length > 2 ? arguments[2] : undefined;\n  return {\n    x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\n    y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0))\n  };\n};\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\n  const {\n    width: parentWidth,\n    height: parentHeight\n  } = getNodeDimensions(parent);\n  const {\n    x: parentX,\n    y: parentY\n  } = parent.internals.positionAbsolute;\n  return clampPosition(childPosition, [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]], childDimensions);\n}\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n  if (value < min) {\n    return clamp(Math.abs(value - min), 1, min) / min;\n  } else if (value > max) {\n    return -clamp(Math.abs(value - max), 1, min) / min;\n  }\n  return 0;\n};\nconst calcAutoPan = function (pos, bounds) {\n  let speed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 15;\n  let distance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n  const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n  const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n  return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2)\n});\nconst rectToBox = _ref5 => {\n  let {\n    x,\n    y,\n    width,\n    height\n  } = _ref5;\n  return {\n    x,\n    y,\n    x2: x + width,\n    y2: y + height\n  };\n};\nconst boxToRect = _ref6 => {\n  let {\n    x,\n    y,\n    x2,\n    y2\n  } = _ref6;\n  return {\n    x,\n    y,\n    width: x2 - x,\n    height: y2 - y\n  };\n};\nconst nodeToRect = function (node) {\n  let nodeOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n};\nconst nodeToBox = function (node) {\n  let nodeOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n    y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0)\n  };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n  const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n  const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n  return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = obj => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = n => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n  }\n};\nconst snapPosition = function (position) {\n  let snapGrid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [1, 1];\n  return {\n    x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n    y: snapGrid[1] * Math.round(position.y / snapGrid[1])\n  };\n};\nconst pointToRendererPoint = function (_ref7, _ref8) {\n  let {\n    x,\n    y\n  } = _ref7;\n  let [tx, ty, tScale] = _ref8;\n  let snapToGrid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let snapGrid = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1];\n  const position = {\n    x: (x - tx) / tScale,\n    y: (y - ty) / tScale\n  };\n  return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = (_ref9, _ref10) => {\n  let {\n    x,\n    y\n  } = _ref9;\n  let [tx, ty, tScale] = _ref10;\n  return {\n    x: x * tScale + tx,\n    y: y * tScale + ty\n  };\n};\n/**\n * Returns a viewport that encloses the given bounds with optional padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport\n * @param width - Width of the viewport\n * @param height  - Height of the viewport\n * @param minZoom - Minimum zoom level of the resulting viewport\n * @param maxZoom - Maximum zoom level of the resulting viewport\n * @param padding - Optional padding around the bounds\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n  { x: 0, y: 0, width: 100, height: 100},\n  1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n  const xZoom = width / (bounds.width * (1 + padding));\n  const yZoom = height / (bounds.height * (1 + padding));\n  const zoom = Math.min(xZoom, yZoom);\n  const clampedZoom = clamp(zoom, minZoom, maxZoom);\n  const boundsCenterX = bounds.x + bounds.width / 2;\n  const boundsCenterY = bounds.y + bounds.height / 2;\n  const x = width / 2 - boundsCenterX * clampedZoom;\n  const y = height / 2 - boundsCenterY * clampedZoom;\n  return {\n    x,\n    y,\n    zoom: clampedZoom\n  };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n  return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n  return {\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n}\nfunction nodeHasDimensions(node) {\n  return (node.measured?.width ?? node.width ?? node.initialWidth) !== undefined && (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined;\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position) {\n  let dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    width: 0,\n    height: 0\n  };\n  let parentId = arguments.length > 2 ? arguments[2] : undefined;\n  let nodeLookup = arguments.length > 3 ? arguments[3] : undefined;\n  let nodeOrigin = arguments.length > 4 ? arguments[4] : undefined;\n  let nextParentId = parentId;\n  const positionAbsolute = {\n    ...position\n  };\n  while (nextParentId) {\n    const parent = nodeLookup.get(nextParentId);\n    nextParentId = parent?.parentId;\n    if (parent) {\n      const origin = parent.origin || nodeOrigin;\n      positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n      positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n    }\n  }\n  return positionAbsolute;\n}\nfunction getPointerPosition(event, _ref11) {\n  let {\n    snapGrid = [0, 0],\n    snapToGrid = false,\n    transform\n  } = _ref11;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const pointerPos = pointToRendererPoint({\n    x,\n    y\n  }, transform);\n  const {\n    x: xSnapped,\n    y: ySnapped\n  } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n  // we need the snapped position in order to be able to skip unnecessary drag events\n  return {\n    xSnapped,\n    ySnapped,\n    ...pointerPos\n  };\n}\nconst getDimensions = node => ({\n  width: node.offsetWidth,\n  height: node.offsetHeight\n});\nconst getHostForElement = element => element.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n  // using composed path for handling shadow dom\n  const target = event.composedPath?.()?.[0] || event.target;\n  const isInput = inputTags.includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n  // when an input field is focused we don't want to trigger deletion or movement of nodes\n  return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = event => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n  const isMouse = isMouseEvent(event);\n  const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n  const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n  return {\n    x: evtX - (bounds?.left ?? 0),\n    y: evtY - (bounds?.top ?? 0)\n  };\n};\n// The handle bounds are calculated relative to the node element.\n// We store them in the internals object of the node in order to avoid\n// unnecessary recalculations.\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n  const handles = nodeElement.querySelectorAll(`.${type}`);\n  if (!handles || !handles.length) {\n    return null;\n  }\n  return Array.from(handles).map(handle => {\n    const handleBounds = handle.getBoundingClientRect();\n    return {\n      id: handle.getAttribute('data-handleid'),\n      type,\n      nodeId,\n      position: handle.getAttribute('data-handlepos'),\n      x: (handleBounds.left - nodeBounds.left) / zoom,\n      y: (handleBounds.top - nodeBounds.top) / zoom,\n      ...getDimensions(handle)\n    };\n  });\n};\nfunction getBezierEdgeCenter(_ref12) {\n  let {\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  } = _ref12;\n  // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n  // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n  const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  const offsetX = Math.abs(centerX - sourceX);\n  const offsetY = Math.abs(centerY - sourceY);\n  return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n  if (distance >= 0) {\n    return 0.5 * distance;\n  }\n  return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature(_ref13) {\n  let {\n    pos,\n    x1,\n    y1,\n    x2,\n    y2,\n    c\n  } = _ref13;\n  switch (pos) {\n    case Position.Left:\n      return [x1 - calculateControlOffset(x1 - x2, c), y1];\n    case Position.Right:\n      return [x1 + calculateControlOffset(x2 - x1, c), y1];\n    case Position.Top:\n      return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n    case Position.Bottom:\n      return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n  }\n}\n/**\n * Get a bezier path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @param params.curvature - The curvature of the bezier edge\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n});\n */\nfunction getBezierPath(_ref14) {\n  let {\n    sourceX,\n    sourceY,\n    sourcePosition = Position.Bottom,\n    targetX,\n    targetY,\n    targetPosition = Position.Top,\n    curvature = 0.25\n  } = _ref14;\n  const [sourceControlX, sourceControlY] = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  });\n  const [targetControlX, targetControlY] = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  });\n  const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  });\n  return [`M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter(_ref15) {\n  let {\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  } = _ref15;\n  const xOffset = Math.abs(targetX - sourceX) / 2;\n  const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  const yOffset = Math.abs(targetY - sourceY) / 2;\n  const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex(_ref16) {\n  let {\n    sourceNode,\n    targetNode,\n    selected = false,\n    zIndex = 0,\n    elevateOnSelect = false\n  } = _ref16;\n  if (!elevateOnSelect) {\n    return zIndex;\n  }\n  const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n  const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n  return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible(_ref17) {\n  let {\n    sourceNode,\n    targetNode,\n    width,\n    height,\n    transform\n  } = _ref17;\n  const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n  if (edgeBox.x === edgeBox.x2) {\n    edgeBox.x2 += 1;\n  }\n  if (edgeBox.y === edgeBox.y2) {\n    edgeBox.y2 += 1;\n  }\n  const viewRect = {\n    x: -transform[0] / transform[2],\n    y: -transform[1] / transform[2],\n    width: width / transform[2],\n    height: height / transform[2]\n  };\n  return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = _ref18 => {\n  let {\n    source,\n    sourceHandle,\n    target,\n    targetHandle\n  } = _ref18;\n  return `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\n};\nconst connectionExists = (edge, edges) => {\n  return edges.some(el => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges\n * @remarks It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an Edge or a Connection you want to add\n * @param edges -  The array of all current edges\n * @returns A new array of edges with the new edge added\n */\nconst addEdge = (edgeParams, edges) => {\n  if (!edgeParams.source || !edgeParams.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  let edge;\n  if (isEdgeBase(edgeParams)) {\n    edge = {\n      ...edgeParams\n    };\n  } else {\n    edge = {\n      ...edgeParams,\n      id: getEdgeId(edgeParams)\n    };\n  }\n  if (connectionExists(edge, edges)) {\n    return edges;\n  }\n  if (edge.sourceHandle === null) {\n    delete edge.sourceHandle;\n  }\n  if (edge.targetHandle === null) {\n    delete edge.targetHandle;\n  }\n  return edges.concat(edge);\n};\n/**\n * A handy utility to reconnect an existing edge with new properties\n * @param oldEdge - The edge you want to update\n * @param newConnection - The new connection you want to update the edge with\n * @param edges - The array of all current edges\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\n * @returns the updated edges array\n */\nconst reconnectEdge = function (oldEdge, newConnection, edges) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    shouldReplaceId: true\n  };\n  const {\n    id: oldEdgeId,\n    ...rest\n  } = oldEdge;\n  if (!newConnection.source || !newConnection.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  const foundEdge = edges.find(e => e.id === oldEdge.id);\n  if (!foundEdge) {\n    devWarn('007', errorMessages['error007'](oldEdgeId));\n    return edges;\n  }\n  // Remove old edge and create the new edge with parameters of old edge.\n  const edge = {\n    ...rest,\n    id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n    source: newConnection.source,\n    target: newConnection.target,\n    sourceHandle: newConnection.sourceHandle,\n    targetHandle: newConnection.targetHandle\n  };\n  return edges.filter(e => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Get a straight path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getStraightPath(_ref19) {\n  let {\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  } = _ref19;\n  const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst handleDirections = {\n  [Position.Left]: {\n    x: -1,\n    y: 0\n  },\n  [Position.Right]: {\n    x: 1,\n    y: 0\n  },\n  [Position.Top]: {\n    x: 0,\n    y: -1\n  },\n  [Position.Bottom]: {\n    x: 0,\n    y: 1\n  }\n};\nconst getDirection = _ref20 => {\n  let {\n    source,\n    sourcePosition = Position.Bottom,\n    target\n  } = _ref20;\n  if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n    return source.x < target.x ? {\n      x: 1,\n      y: 0\n    } : {\n      x: -1,\n      y: 0\n    };\n  }\n  return source.y < target.y ? {\n    x: 0,\n    y: 1\n  } : {\n    x: 0,\n    y: -1\n  };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints(_ref21) {\n  let {\n    source,\n    sourcePosition = Position.Bottom,\n    target,\n    targetPosition = Position.Top,\n    center,\n    offset\n  } = _ref21;\n  const sourceDir = handleDirections[sourcePosition];\n  const targetDir = handleDirections[targetPosition];\n  const sourceGapped = {\n    x: source.x + sourceDir.x * offset,\n    y: source.y + sourceDir.y * offset\n  };\n  const targetGapped = {\n    x: target.x + targetDir.x * offset,\n    y: target.y + targetDir.y * offset\n  };\n  const dir = getDirection({\n    source: sourceGapped,\n    sourcePosition,\n    target: targetGapped\n  });\n  const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n  const currDir = dir[dirAccessor];\n  let points = [];\n  let centerX, centerY;\n  const sourceGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const targetGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y\n  });\n  // opposite handle positions, default case\n  if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n    centerX = center.x ?? defaultCenterX;\n    centerY = center.y ?? defaultCenterY;\n    //    --->\n    //    |\n    // >---\n    const verticalSplit = [{\n      x: centerX,\n      y: sourceGapped.y\n    }, {\n      x: centerX,\n      y: targetGapped.y\n    }];\n    //    |\n    //  ---\n    //  |\n    const horizontalSplit = [{\n      x: sourceGapped.x,\n      y: centerY\n    }, {\n      x: targetGapped.x,\n      y: centerY\n    }];\n    if (sourceDir[dirAccessor] === currDir) {\n      points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n    } else {\n      points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n    }\n  } else {\n    // sourceTarget means we take x from source and y from target, targetSource is the opposite\n    const sourceTarget = [{\n      x: sourceGapped.x,\n      y: targetGapped.y\n    }];\n    const targetSource = [{\n      x: targetGapped.x,\n      y: sourceGapped.y\n    }];\n    // this handles edges with same handle positions\n    if (dirAccessor === 'x') {\n      points = sourceDir.x === currDir ? targetSource : sourceTarget;\n    } else {\n      points = sourceDir.y === currDir ? sourceTarget : targetSource;\n    }\n    if (sourcePosition === targetPosition) {\n      const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n      // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n      if (diff <= offset) {\n        const gapOffset = Math.min(offset - 1, offset - diff);\n        if (sourceDir[dirAccessor] === currDir) {\n          sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n        } else {\n          targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n        }\n      }\n    }\n    // these are conditions for handling mixed handle positions like Right -> Bottom for example\n    if (sourcePosition !== targetPosition) {\n      const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n      const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n      const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n      const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n      const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);\n      if (flipSourceTarget) {\n        points = dirAccessor === 'x' ? sourceTarget : targetSource;\n      }\n    }\n    const sourceGapPoint = {\n      x: sourceGapped.x + sourceGapOffset.x,\n      y: sourceGapped.y + sourceGapOffset.y\n    };\n    const targetGapPoint = {\n      x: targetGapped.x + targetGapOffset.x,\n      y: targetGapped.y + targetGapOffset.y\n    };\n    const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n    const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n    // we want to place the label on the longest segment of the edge\n    if (maxXDistance >= maxYDistance) {\n      centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n      centerY = points[0].y;\n    } else {\n      centerX = points[0].x;\n      centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n    }\n  }\n  const pathPoints = [source, {\n    x: sourceGapped.x + sourceGapOffset.x,\n    y: sourceGapped.y + sourceGapOffset.y\n  }, ...points, {\n    x: targetGapped.x + targetGapOffset.x,\n    y: targetGapped.y + targetGapOffset.y\n  }, target];\n  return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n  const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n  const {\n    x,\n    y\n  } = b;\n  // no bend\n  if (a.x === x && x === c.x || a.y === y && y === c.y) {\n    return `L${x} ${y}`;\n  }\n  // first segment is horizontal\n  if (a.y === y) {\n    const xDir = a.x < c.x ? -1 : 1;\n    const yDir = a.y < c.y ? 1 : -1;\n    return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n  }\n  const xDir = a.x < c.x ? 1 : -1;\n  const yDir = a.y < c.y ? -1 : 1;\n  return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * Get a smooth step path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getSmoothStepPath(_ref22) {\n  let {\n    sourceX,\n    sourceY,\n    sourcePosition = Position.Bottom,\n    targetX,\n    targetY,\n    targetPosition = Position.Top,\n    borderRadius = 5,\n    centerX,\n    centerY,\n    offset = 20\n  } = _ref22;\n  const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n    source: {\n      x: sourceX,\n      y: sourceY\n    },\n    sourcePosition,\n    target: {\n      x: targetX,\n      y: targetY\n    },\n    targetPosition,\n    center: {\n      x: centerX,\n      y: centerY\n    },\n    offset\n  });\n  const path = points.reduce((res, p, i) => {\n    let segment = '';\n    if (i > 0 && i < points.length - 1) {\n      segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n    } else {\n      segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n    }\n    res += segment;\n    return res;\n  }, '');\n  return [path, labelX, labelY, offsetX, offsetY];\n}\nfunction isNodeInitialized(node) {\n  return node && !!(node.internals.handleBounds || node.handles?.length) && !!(node.measured.width || node.width || node.initialWidth);\n}\nfunction getEdgePosition(params) {\n  const {\n    sourceNode,\n    targetNode\n  } = params;\n  if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n    return null;\n  }\n  const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n  const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n  const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\n  const targetHandle = getHandle$1(\n  // when connection type is loose we can define all handles as sources and connect source -> source\n  params.connectionMode === ConnectionMode.Strict ? targetHandleBounds?.target ?? [] : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n  if (!sourceHandle || !targetHandle) {\n    params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n      id: params.id,\n      sourceHandle: params.sourceHandle,\n      targetHandle: params.targetHandle\n    }));\n    return null;\n  }\n  const sourcePosition = sourceHandle?.position || Position.Bottom;\n  const targetPosition = targetHandle?.position || Position.Top;\n  const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n  const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n  return {\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y,\n    sourcePosition,\n    targetPosition\n  };\n}\nfunction toHandleBounds(handles) {\n  if (!handles) {\n    return null;\n  }\n  const source = [];\n  const target = [];\n  for (const handle of handles) {\n    handle.width = handle.width ?? 1;\n    handle.height = handle.height ?? 1;\n    if (handle.type === 'source') {\n      source.push(handle);\n    } else if (handle.type === 'target') {\n      target.push(handle);\n    }\n  }\n  return {\n    source,\n    target\n  };\n}\nfunction getHandlePosition(node, handle) {\n  let fallbackPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Position.Left;\n  let center = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n  const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n  const {\n    width,\n    height\n  } = handle ?? getNodeDimensions(node);\n  if (center) {\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n  const position = handle?.position ?? fallbackPosition;\n  switch (position) {\n    case Position.Top:\n      return {\n        x: x + width / 2,\n        y\n      };\n    case Position.Right:\n      return {\n        x: x + width,\n        y: y + height / 2\n      };\n    case Position.Bottom:\n      return {\n        x: x + width / 2,\n        y: y + height\n      };\n    case Position.Left:\n      return {\n        x,\n        y: y + height / 2\n      };\n  }\n}\nfunction getHandle$1(bounds, handleId) {\n  if (!bounds) {\n    return null;\n  }\n  // if no handleId is given, we use the first handle, otherwise we check for the id\n  return (!handleId ? bounds[0] : bounds.find(d => d.id === handleId)) || null;\n}\nfunction getMarkerId(marker, id) {\n  if (!marker) {\n    return '';\n  }\n  if (typeof marker === 'string') {\n    return marker;\n  }\n  const idPrefix = id ? `${id}__` : '';\n  return `${idPrefix}${Object.keys(marker).sort().map(key => `${key}=${marker[key]}`).join('&')}`;\n}\nfunction createMarkerIds(edges, _ref23) {\n  let {\n    id,\n    defaultColor,\n    defaultMarkerStart,\n    defaultMarkerEnd\n  } = _ref23;\n  const ids = new Set();\n  return edges.reduce((markers, edge) => {\n    [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach(marker => {\n      if (marker && typeof marker === 'object') {\n        const markerId = getMarkerId(marker, id);\n        if (!ids.has(markerId)) {\n          markers.push({\n            id: markerId,\n            color: marker.color || defaultColor,\n            ...marker\n          });\n          ids.add(markerId);\n        }\n      }\n    });\n    return markers;\n  }, []).sort((a, b) => a.id.localeCompare(b.id));\n}\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n  let alignmentOffset = 0.5;\n  if (align === 'start') {\n    alignmentOffset = 0;\n  } else if (align === 'end') {\n    alignmentOffset = 1;\n  }\n  // position === Position.Top\n  // we set the x any y position of the toolbar based on the nodes position\n  let pos = [(nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x, nodeRect.y * viewport.zoom + viewport.y - offset];\n  // and than shift it based on the alignment. The shift values are in %.\n  let shift = [-100 * alignmentOffset, -100];\n  switch (position) {\n    case Position.Right:\n      pos = [(nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [0, -100 * alignmentOffset];\n      break;\n    case Position.Bottom:\n      pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n      shift[1] = 0;\n      break;\n    case Position.Left:\n      pos = [nodeRect.x * viewport.zoom + viewport.x - offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [-100, -100 * alignmentOffset];\n      break;\n  }\n  return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\nconst defaultOptions = {\n  nodeOrigin: [0, 0],\n  nodeExtent: infiniteExtent,\n  elevateNodesOnSelect: true,\n  defaults: {}\n};\nconst adoptUserNodesDefaultOptions = {\n  ...defaultOptions,\n  checkEquality: true\n};\nfunction mergeObjects(base, incoming) {\n  const result = {\n    ...base\n  };\n  for (const key in incoming) {\n    if (incoming[key] !== undefined) {\n      // typecast is safe here, because we check for undefined\n      result[key] = incoming[key];\n    }\n  }\n  return result;\n}\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(defaultOptions, options);\n  for (const node of nodeLookup.values()) {\n    if (node.parentId) {\n      updateChildNode(node, nodeLookup, parentLookup, _options);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\n      const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\n      node.internals.positionAbsolute = clampedPosition;\n    }\n  }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\n  const tmpLookup = new Map(nodeLookup);\n  const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\n  nodeLookup.clear();\n  parentLookup.clear();\n  for (const userNode of nodes) {\n    let internalNode = tmpLookup.get(userNode.id);\n    if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n      nodeLookup.set(userNode.id, internalNode);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\n      const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\n      internalNode = {\n        ..._options.defaults,\n        ...userNode,\n        measured: {\n          width: userNode.measured?.width,\n          height: userNode.measured?.height\n        },\n        internals: {\n          positionAbsolute: clampedPosition,\n          // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n          handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n          z: calculateZ(userNode, selectedNodeZ),\n          userNode\n        }\n      };\n      nodeLookup.set(userNode.id, internalNode);\n    }\n    if (userNode.parentId) {\n      updateChildNode(internalNode, nodeLookup, parentLookup, options);\n    }\n  }\n}\nfunction updateParentLookup(node, parentLookup) {\n  if (!node.parentId) {\n    return;\n  }\n  const childNodes = parentLookup.get(node.parentId);\n  if (childNodes) {\n    childNodes.set(node.id, node);\n  } else {\n    parentLookup.set(node.parentId, new Map([[node.id, node]]));\n  }\n}\n/**\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\n */\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\n  const {\n    elevateNodesOnSelect,\n    nodeOrigin,\n    nodeExtent\n  } = mergeObjects(defaultOptions, options);\n  const parentId = node.parentId;\n  const parentNode = nodeLookup.get(parentId);\n  if (!parentNode) {\n    console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n    return;\n  }\n  updateParentLookup(node, parentLookup);\n  const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n  const {\n    x,\n    y,\n    z\n  } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\n  const {\n    positionAbsolute\n  } = node.internals;\n  const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\n  if (positionChanged || z !== node.internals.z) {\n    node.internals = {\n      ...node.internals,\n      positionAbsolute: positionChanged ? {\n        x,\n        y\n      } : positionAbsolute,\n      z\n    };\n  }\n}\nfunction calculateZ(node, selectedNodeZ) {\n  return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode.internals.positionAbsolute;\n  const childDimensions = getNodeDimensions(childNode);\n  const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\n  const clampedPosition = isCoordinateExtent(childNode.extent) ? clampPosition(positionWithOrigin, childNode.extent, childDimensions) : positionWithOrigin;\n  let absolutePosition = clampPosition({\n    x: parentX + clampedPosition.x,\n    y: parentY + clampedPosition.y\n  }, nodeExtent, childDimensions);\n  if (childNode.extent === 'parent') {\n    absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\n  }\n  const childZ = calculateZ(childNode, selectedNodeZ);\n  const parentZ = parentNode.internals.z ?? 0;\n  return {\n    x: absolutePosition.x,\n    y: absolutePosition.y,\n    z: parentZ > childZ ? parentZ : childZ\n  };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup) {\n  let nodeOrigin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0];\n  const changes = [];\n  const parentExpansions = new Map();\n  // determine the expanded rectangle the child nodes would take for each parent\n  for (const child of children) {\n    const parent = nodeLookup.get(child.parentId);\n    if (!parent) {\n      continue;\n    }\n    const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n    const expandedRect = getBoundsOfRects(parentRect, child.rect);\n    parentExpansions.set(child.parentId, {\n      expandedRect,\n      parent\n    });\n  }\n  if (parentExpansions.size > 0) {\n    parentExpansions.forEach((_ref24, parentId) => {\n      let {\n        expandedRect,\n        parent\n      } = _ref24;\n      // determine the position & dimensions of the parent\n      const positionAbsolute = parent.internals.positionAbsolute;\n      const dimensions = getNodeDimensions(parent);\n      const origin = parent.origin ?? nodeOrigin;\n      // determine how much the parent expands in width and position\n      const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n      const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n      const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n      const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n      const widthChange = (newWidth - dimensions.width) * origin[0];\n      const heightChange = (newHeight - dimensions.height) * origin[1];\n      // We need to correct the position of the parent node if the origin is not [0,0]\n      if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n        changes.push({\n          id: parentId,\n          type: 'position',\n          position: {\n            x: parent.position.x - xChange + widthChange,\n            y: parent.position.y - yChange + heightChange\n          }\n        });\n        // We move all child nodes in the oppsite direction\n        // so the x,y changes of the parent do not move the children\n        parentLookup.get(parentId)?.forEach(childNode => {\n          if (!children.some(child => child.id === childNode.id)) {\n            changes.push({\n              id: childNode.id,\n              type: 'position',\n              position: {\n                x: childNode.position.x + xChange,\n                y: childNode.position.y + yChange\n              }\n            });\n          }\n        });\n      }\n      // We need to correct the dimensions of the parent node if the origin is not [0,0]\n      if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n        changes.push({\n          id: parentId,\n          type: 'dimensions',\n          setAttributes: true,\n          dimensions: {\n            width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n            height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0)\n          }\n        });\n      }\n    });\n  }\n  return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\n  const viewportNode = domNode?.querySelector('.xyflow__viewport');\n  let updatedInternals = false;\n  if (!viewportNode) {\n    return {\n      changes: [],\n      updatedInternals\n    };\n  }\n  const changes = [];\n  const style = window.getComputedStyle(viewportNode);\n  const {\n    m22: zoom\n  } = new window.DOMMatrixReadOnly(style.transform);\n  // in this array we collect nodes, that might trigger changes (like expanding parent)\n  const parentExpandChildren = [];\n  for (const update of updates.values()) {\n    const node = nodeLookup.get(update.id);\n    if (!node) {\n      continue;\n    }\n    if (node.hidden) {\n      node.internals = {\n        ...node.internals,\n        handleBounds: undefined\n      };\n      updatedInternals = true;\n    } else {\n      const dimensions = getDimensions(update.nodeElement);\n      const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n      const doUpdate = !!(dimensions.width && dimensions.height && (dimensionChanged || !node.internals.handleBounds || update.force));\n      if (doUpdate) {\n        const nodeBounds = update.nodeElement.getBoundingClientRect();\n        const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\n        let {\n          positionAbsolute\n        } = node.internals;\n        if (node.parentId && node.extent === 'parent') {\n          positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\n        } else if (extent) {\n          positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\n        }\n        node.measured = dimensions;\n        node.internals = {\n          ...node.internals,\n          positionAbsolute,\n          handleBounds: {\n            source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n            target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id)\n          }\n        };\n        if (node.parentId) {\n          updateChildNode(node, nodeLookup, parentLookup, {\n            nodeOrigin\n          });\n        }\n        updatedInternals = true;\n        if (dimensionChanged) {\n          changes.push({\n            id: node.id,\n            type: 'dimensions',\n            dimensions\n          });\n          if (node.expandParent && node.parentId) {\n            parentExpandChildren.push({\n              id: node.id,\n              parentId: node.parentId,\n              rect: nodeToRect(node, nodeOrigin)\n            });\n          }\n        }\n      }\n    }\n  }\n  if (parentExpandChildren.length > 0) {\n    const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n    changes.push(...parentExpandChanges);\n  }\n  return {\n    changes,\n    updatedInternals\n  };\n}\nasync function panBy(_ref25) {\n  let {\n    delta,\n    panZoom,\n    transform,\n    translateExtent,\n    width,\n    height\n  } = _ref25;\n  if (!panZoom || !delta.x && !delta.y) {\n    return Promise.resolve(false);\n  }\n  const nextViewport = await panZoom.setViewportConstrained({\n    x: transform[0] + delta.x,\n    y: transform[1] + delta.y,\n    zoom: transform[2]\n  }, [[0, 0], [width, height]], translateExtent);\n  const transformChanged = !!nextViewport && (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n  return Promise.resolve(transformChanged);\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n  connectionLookup.clear();\n  edgeLookup.clear();\n  for (const edge of edges) {\n    const {\n      source,\n      target,\n      sourceHandle = null,\n      targetHandle = null\n    } = edge;\n    const sourceKey = `${source}-source-${sourceHandle}`;\n    const targetKey = `${target}-target-${targetHandle}`;\n    const prevSource = connectionLookup.get(sourceKey) || new Map();\n    const prevTarget = connectionLookup.get(targetKey) || new Map();\n    const connection = {\n      edgeId: edge.id,\n      source,\n      target,\n      sourceHandle,\n      targetHandle\n    };\n    edgeLookup.set(edge.id, edge);\n    connectionLookup.set(sourceKey, prevSource.set(`${target}-${targetHandle}`, connection));\n    connectionLookup.set(targetKey, prevTarget.set(`${source}-${sourceHandle}`, connection));\n  }\n}\nfunction shallowNodeData(a, b) {\n  if (a === null || b === null) {\n    return false;\n  }\n  const _a = Array.isArray(a) ? a : [a];\n  const _b = Array.isArray(b) ? b : [b];\n  if (_a.length !== _b.length) {\n    return false;\n  }\n  for (let i = 0; i < _a.length; i++) {\n    if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isParentSelected(node, nodeLookup) {\n  if (!node.parentId) {\n    return false;\n  }\n  const parentNode = nodeLookup.get(node.parentId);\n  if (!parentNode) {\n    return false;\n  }\n  if (parentNode.selected) {\n    return true;\n  }\n  return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n  let current = target;\n  do {\n    if (current?.matches(selector)) return true;\n    if (current === domNode) return false;\n    current = current.parentElement;\n  } while (current);\n  return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n  const dragItems = new Map();\n  for (const [id, node] of nodeLookup) {\n    if ((node.selected || node.id === nodeId) && (!node.parentId || !isParentSelected(node, nodeLookup)) && (node.draggable || nodesDraggable && typeof node.draggable === 'undefined')) {\n      const internalNode = nodeLookup.get(id);\n      if (internalNode) {\n        dragItems.set(id, {\n          id,\n          position: internalNode.position || {\n            x: 0,\n            y: 0\n          },\n          distance: {\n            x: mousePos.x - internalNode.internals.positionAbsolute.x,\n            y: mousePos.y - internalNode.internals.positionAbsolute.y\n          },\n          extent: internalNode.extent,\n          parentId: internalNode.parentId,\n          origin: internalNode.origin,\n          expandParent: internalNode.expandParent,\n          internals: {\n            positionAbsolute: internalNode.internals.positionAbsolute || {\n              x: 0,\n              y: 0\n            }\n          },\n          measured: {\n            width: internalNode.measured.width ?? 0,\n            height: internalNode.measured.height ?? 0\n          }\n        });\n      }\n    }\n  }\n  return dragItems;\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams(_ref26) {\n  let {\n    nodeId,\n    dragItems,\n    nodeLookup,\n    dragging = true\n  } = _ref26;\n  const nodesFromDragItems = [];\n  for (const [id, dragItem] of dragItems) {\n    const node = nodeLookup.get(id)?.internals.userNode;\n    if (node) {\n      nodesFromDragItems.push({\n        ...node,\n        position: dragItem.position,\n        dragging\n      });\n    }\n  }\n  if (!nodeId) {\n    return [nodesFromDragItems[0], nodesFromDragItems];\n  }\n  const node = nodeLookup.get(nodeId).internals.userNode;\n  return [{\n    ...node,\n    position: dragItems.get(nodeId)?.position || node.position,\n    dragging\n  }, nodesFromDragItems];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag(_ref27) {\n  let {\n    onNodeMouseDown,\n    getStoreItems,\n    onDragStart,\n    onDrag,\n    onDragStop\n  } = _ref27;\n  let lastPos = {\n    x: null,\n    y: null\n  };\n  let autoPanId = 0;\n  let dragItems = new Map();\n  let autoPanStarted = false;\n  let mousePosition = {\n    x: 0,\n    y: 0\n  };\n  let containerBounds = null;\n  let dragStarted = false;\n  let d3Selection = null;\n  let abortDrag = false; // prevents unintentional dragging on multitouch\n  // public functions\n  function update(_ref28) {\n    let {\n      noDragClassName,\n      handleSelector,\n      domNode,\n      isSelectable,\n      nodeId,\n      nodeClickDistance = 0\n    } = _ref28;\n    d3Selection = select(domNode);\n    function updateNodes(_ref29, dragEvent) {\n      let {\n        x,\n        y\n      } = _ref29;\n      const {\n        nodeLookup,\n        nodeExtent,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin,\n        onNodeDrag,\n        onSelectionDrag,\n        onError,\n        updateNodePositions\n      } = getStoreItems();\n      lastPos = {\n        x,\n        y\n      };\n      let hasChange = false;\n      let nodesBox = {\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 0\n      };\n      if (dragItems.size > 1 && nodeExtent) {\n        const rect = getInternalNodesBounds(dragItems);\n        nodesBox = rectToBox(rect);\n      }\n      for (const [id, dragItem] of dragItems) {\n        if (!nodeLookup.has(id)) {\n          // if the node is not in the nodeLookup anymore, it was probably deleted while dragging\n          // and we don't need to update it anymore\n          continue;\n        }\n        let nextPosition = {\n          x: x - dragItem.distance.x,\n          y: y - dragItem.distance.y\n        };\n        if (snapToGrid) {\n          nextPosition = snapPosition(nextPosition, snapGrid);\n        }\n        // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n        // based on its position so that the node stays at it's position relative to the selection.\n        let adjustedNodeExtent = [[nodeExtent[0][0], nodeExtent[0][1]], [nodeExtent[1][0], nodeExtent[1][1]]];\n        if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n          const {\n            positionAbsolute\n          } = dragItem.internals;\n          const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n          const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n          const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n          const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n          adjustedNodeExtent = [[x1, y1], [x2, y2]];\n        }\n        const {\n          position,\n          positionAbsolute\n        } = calculateNodePosition({\n          nodeId: id,\n          nextPosition,\n          nodeLookup,\n          nodeExtent: adjustedNodeExtent,\n          nodeOrigin,\n          onError\n        });\n        // we want to make sure that we only fire a change event when there is a change\n        hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n        dragItem.position = position;\n        dragItem.internals.positionAbsolute = positionAbsolute;\n      }\n      if (!hasChange) {\n        return;\n      }\n      updateNodePositions(dragItems, true);\n      if (dragEvent && (onDrag || onNodeDrag || !nodeId && onSelectionDrag)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n        onNodeDrag?.(dragEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDrag?.(dragEvent, currentNodes);\n        }\n      }\n    }\n    async function autoPan() {\n      if (!containerBounds) {\n        return;\n      }\n      const {\n        transform,\n        panBy,\n        autoPanSpeed\n      } = getStoreItems();\n      const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n      if (xMovement !== 0 || yMovement !== 0) {\n        lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n        lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n        if (await panBy({\n          x: xMovement,\n          y: yMovement\n        })) {\n          updateNodes(lastPos, null);\n        }\n      }\n      autoPanId = requestAnimationFrame(autoPan);\n    }\n    function startDrag(event) {\n      const {\n        nodeLookup,\n        multiSelectionActive,\n        nodesDraggable,\n        transform,\n        snapGrid,\n        snapToGrid,\n        selectNodesOnDrag,\n        onNodeDragStart,\n        onSelectionDragStart,\n        unselectNodesAndEdges\n      } = getStoreItems();\n      dragStarted = true;\n      if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n        if (!nodeLookup.get(nodeId)?.selected) {\n          // we need to reset selected nodes when selectNodesOnDrag=false\n          unselectNodesAndEdges();\n        }\n      }\n      if (isSelectable && selectNodesOnDrag && nodeId) {\n        onNodeMouseDown?.(nodeId);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      lastPos = pointerPos;\n      dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n      if (dragItems.size > 0 && (onDragStart || onNodeDragStart || !nodeId && onSelectionDragStart)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n        onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDragStart?.(event.sourceEvent, currentNodes);\n        }\n      }\n    }\n    const d3DragInstance = drag().clickDistance(nodeClickDistance).on('start', event => {\n      const {\n        domNode,\n        nodeDragThreshold,\n        transform,\n        snapGrid,\n        snapToGrid\n      } = getStoreItems();\n      abortDrag = false;\n      if (nodeDragThreshold === 0) {\n        startDrag(event);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      lastPos = pointerPos;\n      containerBounds = domNode?.getBoundingClientRect() || null;\n      mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n    }).on('drag', event => {\n      const {\n        autoPanOnNodeDrag,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeDragThreshold,\n        nodeLookup\n      } = getStoreItems();\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      if (event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1 ||\n      // if user deletes a node while dragging, we need to abort the drag to prevent errors\n      nodeId && !nodeLookup.has(nodeId)) {\n        abortDrag = true;\n      }\n      if (abortDrag) {\n        return;\n      }\n      if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n        autoPanStarted = true;\n        autoPan();\n      }\n      if (!dragStarted) {\n        const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n        const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance > nodeDragThreshold) {\n          startDrag(event);\n        }\n      }\n      // skip events without movement\n      if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n        // dragEvent = event.sourceEvent as MouseEvent;\n        mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        updateNodes(pointerPos, event.sourceEvent);\n      }\n    }).on('end', event => {\n      if (!dragStarted || abortDrag) {\n        return;\n      }\n      autoPanStarted = false;\n      dragStarted = false;\n      cancelAnimationFrame(autoPanId);\n      if (dragItems.size > 0) {\n        const {\n          nodeLookup,\n          updateNodePositions,\n          onNodeDragStop,\n          onSelectionDragStop\n        } = getStoreItems();\n        updateNodePositions(dragItems, false);\n        if (onDragStop || onNodeDragStop || !nodeId && onSelectionDragStop) {\n          const [currentNode, currentNodes] = getEventHandlerParams({\n            nodeId,\n            dragItems,\n            nodeLookup,\n            dragging: false\n          });\n          onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n          onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n          if (!nodeId) {\n            onSelectionDragStop?.(event.sourceEvent, currentNodes);\n          }\n        }\n      }\n    }).filter(event => {\n      const target = event.target;\n      const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) && (!handleSelector || hasSelector(target, handleSelector, domNode));\n      return isDraggable;\n    });\n    d3Selection.call(d3DragInstance);\n  }\n  function destroy() {\n    d3Selection?.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\n  const nodes = [];\n  const rect = {\n    x: position.x - distance,\n    y: position.y - distance,\n    width: distance * 2,\n    height: distance * 2\n  };\n  for (const node of nodeLookup.values()) {\n    if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n// this distance is used for the area around the user pointer\n// while doing a connection for finding the closest nodes\nconst ADDITIONAL_DISTANCE = 250;\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\n  let closestHandles = [];\n  let minDistance = Infinity;\n  const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\n  for (const node of closeNodes) {\n    const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n    for (const handle of allHandles) {\n      // if the handle is the same as the fromHandle we skip it\n      if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\n        continue;\n      }\n      // determine absolute position of the handle\n      const {\n        x,\n        y\n      } = getHandlePosition(node, handle, handle.position, true);\n      const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\n      if (distance > connectionRadius) {\n        continue;\n      }\n      if (distance < minDistance) {\n        closestHandles = [{\n          ...handle,\n          x,\n          y\n        }];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // when multiple handles are on the same distance we collect all of them\n        closestHandles.push({\n          ...handle,\n          x,\n          y\n        });\n      }\n    }\n  }\n  if (!closestHandles.length) {\n    return null;\n  }\n  // when multiple handles overlay each other we prefer the opposite handle\n  if (closestHandles.length > 1) {\n    const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\n    return closestHandles.find(handle => handle.type === oppositeHandleType) ?? closestHandles[0];\n  }\n  return closestHandles[0];\n}\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode) {\n  let withAbsolutePosition = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  const node = nodeLookup.get(nodeId);\n  if (!node) {\n    return null;\n  }\n  const handles = connectionMode === 'strict' ? node.internals.handleBounds?.[handleType] : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n  const handle = (handleId ? handles?.find(h => h.id === handleId) : handles?.[0]) ?? null;\n  return handle && withAbsolutePosition ? {\n    ...handle,\n    ...getHandlePosition(node, handle, handle.position, true)\n  } : handle;\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n  if (edgeUpdaterType) {\n    return edgeUpdaterType;\n  } else if (handleDomNode?.classList.contains('target')) {\n    return 'target';\n  } else if (handleDomNode?.classList.contains('source')) {\n    return 'source';\n  }\n  return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n  let isValid = null;\n  if (isHandleValid) {\n    isValid = true;\n  } else if (isInsideConnectionRadius && !isHandleValid) {\n    isValid = false;\n  }\n  return isValid;\n}\nconst alwaysValid = () => true;\nfunction onPointerDown(event, _ref30) {\n  let {\n    connectionMode,\n    connectionRadius,\n    handleId,\n    nodeId,\n    edgeUpdaterType,\n    isTarget,\n    domNode,\n    nodeLookup,\n    lib,\n    autoPanOnConnect,\n    flowId,\n    panBy,\n    cancelConnection,\n    onConnectStart,\n    onConnect,\n    onConnectEnd,\n    isValidConnection = alwaysValid,\n    onReconnectEnd,\n    updateConnection,\n    getTransform,\n    getFromHandle,\n    autoPanSpeed\n  } = _ref30;\n  // when xyflow is used inside a shadow root we can't use document\n  const doc = getHostForElement(event.target);\n  let autoPanId = 0;\n  let closestHandle;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const clickedHandle = doc?.elementFromPoint(x, y);\n  const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n  const containerBounds = domNode?.getBoundingClientRect();\n  if (!containerBounds || !handleType) {\n    return;\n  }\n  const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\n  if (!fromHandleInternal) {\n    return;\n  }\n  let position = getEventPosition(event, containerBounds);\n  let autoPanStarted = false;\n  let connection = null;\n  let isValid = false;\n  let handleDomNode = null;\n  // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n  function autoPan() {\n    if (!autoPanOnConnect || !containerBounds) {\n      return;\n    }\n    const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n    panBy({\n      x,\n      y\n    });\n    autoPanId = requestAnimationFrame(autoPan);\n  }\n  // Stays the same for all consecutive pointermove events\n  const fromHandle = {\n    ...fromHandleInternal,\n    nodeId,\n    type: handleType,\n    position: fromHandleInternal.position\n  };\n  const fromNodeInternal = nodeLookup.get(nodeId);\n  const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n  const newConnection = {\n    inProgress: true,\n    isValid: null,\n    from,\n    fromHandle,\n    fromPosition: fromHandle.position,\n    fromNode: fromNodeInternal,\n    to: position,\n    toHandle: null,\n    toPosition: oppositePosition[fromHandle.position],\n    toNode: null\n  };\n  updateConnection(newConnection);\n  let previousConnection = newConnection;\n  onConnectStart?.(event, {\n    nodeId,\n    handleId,\n    handleType\n  });\n  function onPointerMove(event) {\n    if (!getFromHandle() || !fromHandle) {\n      onPointerUp(event);\n      return;\n    }\n    const transform = getTransform();\n    position = getEventPosition(event, containerBounds);\n    closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\n    if (!autoPanStarted) {\n      autoPan();\n      autoPanStarted = true;\n    }\n    const result = isValidHandle(event, {\n      handle: closestHandle,\n      connectionMode,\n      fromNodeId: nodeId,\n      fromHandleId: handleId,\n      fromType: isTarget ? 'target' : 'source',\n      isValidConnection,\n      doc,\n      lib,\n      flowId,\n      nodeLookup\n    });\n    handleDomNode = result.handleDomNode;\n    connection = result.connection;\n    isValid = isConnectionValid(!!closestHandle, result.isValid);\n    const newConnection = {\n      // from stays the same\n      ...previousConnection,\n      isValid,\n      to: closestHandle && isValid ? rendererPointToPoint({\n        x: closestHandle.x,\n        y: closestHandle.y\n      }, transform) : position,\n      toHandle: result.toHandle,\n      toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n      toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null\n    };\n    // we don't want to trigger an update when the connection\n    // is snapped to the same handle as before\n    if (isValid && closestHandle && previousConnection.toHandle && newConnection.toHandle && previousConnection.toHandle.type === newConnection.toHandle.type && previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId && previousConnection.toHandle.id === newConnection.toHandle.id && previousConnection.to.x === newConnection.to.x && previousConnection.to.y === newConnection.to.y) {\n      return;\n    }\n    updateConnection(newConnection);\n    previousConnection = newConnection;\n  }\n  function onPointerUp(event) {\n    if ((closestHandle || handleDomNode) && connection && isValid) {\n      onConnect?.(connection);\n    }\n    // it's important to get a fresh reference from the store here\n    // in order to get the latest state of onConnectEnd\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      inProgress,\n      ...connectionState\n    } = previousConnection;\n    const finalConnectionState = {\n      ...connectionState,\n      toPosition: previousConnection.toHandle ? previousConnection.toPosition : null\n    };\n    onConnectEnd?.(event, finalConnectionState);\n    if (edgeUpdaterType) {\n      onReconnectEnd?.(event, finalConnectionState);\n    }\n    cancelConnection();\n    cancelAnimationFrame(autoPanId);\n    autoPanStarted = false;\n    isValid = false;\n    connection = null;\n    handleDomNode = null;\n    doc.removeEventListener('mousemove', onPointerMove);\n    doc.removeEventListener('mouseup', onPointerUp);\n    doc.removeEventListener('touchmove', onPointerMove);\n    doc.removeEventListener('touchend', onPointerUp);\n  }\n  doc.addEventListener('mousemove', onPointerMove);\n  doc.addEventListener('mouseup', onPointerUp);\n  doc.addEventListener('touchmove', onPointerMove);\n  doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, _ref31) {\n  let {\n    handle,\n    connectionMode,\n    fromNodeId,\n    fromHandleId,\n    fromType,\n    doc,\n    lib,\n    flowId,\n    isValidConnection = alwaysValid,\n    nodeLookup\n  } = _ref31;\n  const isTarget = fromType === 'target';\n  const handleDomNode = handle ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`) : null;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const handleBelow = doc.elementFromPoint(x, y);\n  // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n  // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n  const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n  const result = {\n    handleDomNode: handleToCheck,\n    isValid: false,\n    connection: null,\n    toHandle: null\n  };\n  if (handleToCheck) {\n    const handleType = getHandleType(undefined, handleToCheck);\n    const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n    const handleId = handleToCheck.getAttribute('data-handleid');\n    const connectable = handleToCheck.classList.contains('connectable');\n    const connectableEnd = handleToCheck.classList.contains('connectableend');\n    if (!handleNodeId || !handleType) {\n      return result;\n    }\n    const connection = {\n      source: isTarget ? handleNodeId : fromNodeId,\n      sourceHandle: isTarget ? handleId : fromHandleId,\n      target: isTarget ? fromNodeId : handleNodeId,\n      targetHandle: isTarget ? fromHandleId : handleId\n    };\n    result.connection = connection;\n    const isConnectable = connectable && connectableEnd;\n    // in strict mode we don't allow target to target or source to source connections\n    const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === 'source' || !isTarget && handleType === 'target' : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n    result.isValid = isValid && isValidConnection(connection);\n    result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\n  }\n  return result;\n}\nconst XYHandle = {\n  onPointerDown,\n  isValid: isValidHandle\n};\nfunction XYMinimap(_ref32) {\n  let {\n    domNode,\n    panZoom,\n    getTransform,\n    getViewScale\n  } = _ref32;\n  const selection = select(domNode);\n  function update(_ref33) {\n    let {\n      translateExtent,\n      width,\n      height,\n      zoomStep = 10,\n      pannable = true,\n      zoomable = true,\n      inversePan = false\n    } = _ref33;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const zoomHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n        return;\n      }\n      const pinchDelta = -event.sourceEvent.deltaY * (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) * zoomStep;\n      const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n      panZoom.scaleTo(nextZoom);\n    };\n    let panStart = [0, 0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panStartHandler = event => {\n      if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n        panStart = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove' || !panZoom) {\n        return;\n      }\n      const panCurrent = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n      panStart = panCurrent;\n      const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n      const position = {\n        x: transform[0] - panDelta[0] * moveScale,\n        y: transform[1] - panDelta[1] * moveScale\n      };\n      const extent = [[0, 0], [width, height]];\n      panZoom.setViewportConstrained({\n        x: position.x,\n        y: position.y,\n        zoom: transform[2]\n      }, extent, translateExtent);\n    };\n    const zoomAndPanHandler = zoom().on('start', panStartHandler)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom', pannable ? panHandler : null)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom.wheel', zoomable ? zoomHandler : null);\n    selection.call(zoomAndPanHandler, {});\n  }\n  function destroy() {\n    selection.on('zoom', null);\n  }\n  return {\n    update,\n    destroy,\n    pointer\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = transform => ({\n  x: transform.x,\n  y: transform.y,\n  zoom: transform.k\n});\nconst viewportToTransform = _ref34 => {\n  let {\n    x,\n    y,\n    zoom\n  } = _ref34;\n  return zoomIdentity.translate(x, y).scale(zoom);\n};\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = function (selection) {\n  let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let onEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  const hasDuration = typeof duration === 'number' && duration > 0;\n  if (!hasDuration) {\n    onEnd();\n  }\n  return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = event => {\n  const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nfunction createPanOnScrollHandler(_ref35) {\n  let {\n    zoomPanValues,\n    noWheelClassName,\n    d3Selection,\n    d3Zoom,\n    panOnScrollMode,\n    panOnScrollSpeed,\n    zoomOnPinch,\n    onPanZoomStart,\n    onPanZoom,\n    onPanZoomEnd\n  } = _ref35;\n  return event => {\n    if (isWrappedWithClass(event, noWheelClassName)) {\n      return false;\n    }\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    const currentZoom = d3Selection.property('__zoom').k || 1;\n    // macos sets ctrlKey=true for pinch gesture on a trackpad\n    if (event.ctrlKey && zoomOnPinch) {\n      const point = pointer(event);\n      const pinchDelta = wheelDelta(event);\n      const zoom = currentZoom * Math.pow(2, pinchDelta);\n      // @ts-ignore\n      d3Zoom.scaleTo(d3Selection, zoom, point, event);\n      return;\n    }\n    // increase scroll speed in firefox\n    // firefox: deltaMode === 1; chrome: deltaMode === 0\n    const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n    let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n    let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n    // this enables vertical scrolling with shift + scroll on windows\n    if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n      deltaX = event.deltaY * deltaNormalize;\n      deltaY = 0;\n    }\n    d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed,\n    // @ts-ignore\n    {\n      internal: true\n    });\n    const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n    clearTimeout(zoomPanValues.panScrollTimeout);\n    // for pan on scroll we need to handle the event calls on our own\n    // we can't use the start, zoom and end events from d3-zoom\n    // because start and move gets called on every scroll event and not once at the beginning\n    if (!zoomPanValues.isPanScrolling) {\n      zoomPanValues.isPanScrolling = true;\n      onPanZoomStart?.(event, nextViewport);\n    }\n    if (zoomPanValues.isPanScrolling) {\n      onPanZoom?.(event, nextViewport);\n      zoomPanValues.panScrollTimeout = setTimeout(() => {\n        onPanZoomEnd?.(event, nextViewport);\n        zoomPanValues.isPanScrolling = false;\n      }, 150);\n    }\n  };\n}\nfunction createZoomOnScrollHandler(_ref36) {\n  let {\n    noWheelClassName,\n    preventScrolling,\n    d3ZoomHandler\n  } = _ref36;\n  return function (event, d) {\n    // we still want to enable pinch zooming even if preventScrolling is set to false\n    const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n    if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\n      return null;\n    }\n    event.preventDefault();\n    d3ZoomHandler.call(this, event, d);\n  };\n}\nfunction createPanZoomStartHandler(_ref37) {\n  let {\n    zoomPanValues,\n    onDraggingChange,\n    onPanZoomStart\n  } = _ref37;\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    const viewport = transformToViewport(event.transform);\n    // we need to remember it here, because it's always 0 in the \"zoom\" event\n    zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n    zoomPanValues.isZoomingOrPanning = true;\n    zoomPanValues.prevViewport = viewport;\n    if (event.sourceEvent?.type === 'mousedown') {\n      onDraggingChange(true);\n    }\n    if (onPanZoomStart) {\n      onPanZoomStart?.(event.sourceEvent, viewport);\n    }\n  };\n}\nfunction createPanZoomHandler(_ref38) {\n  let {\n    zoomPanValues,\n    panOnDrag,\n    onPaneContextMenu,\n    onTransformChange,\n    onPanZoom\n  } = _ref38;\n  return event => {\n    zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n    if (!event.sourceEvent?.sync) {\n      onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n    }\n    if (onPanZoom && !event.sourceEvent?.internal) {\n      onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n    }\n  };\n}\nfunction createPanZoomEndHandler(_ref39) {\n  let {\n    zoomPanValues,\n    panOnDrag,\n    panOnScroll,\n    onDraggingChange,\n    onPanZoomEnd,\n    onPaneContextMenu\n  } = _ref39;\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    zoomPanValues.isZoomingOrPanning = false;\n    if (onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) && !zoomPanValues.usedRightMouseButton && event.sourceEvent) {\n      onPaneContextMenu(event.sourceEvent);\n    }\n    zoomPanValues.usedRightMouseButton = false;\n    onDraggingChange(false);\n    if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n      const viewport = transformToViewport(event.transform);\n      zoomPanValues.prevViewport = viewport;\n      clearTimeout(zoomPanValues.timerId);\n      zoomPanValues.timerId = setTimeout(() => {\n        onPanZoomEnd?.(event.sourceEvent, viewport);\n      },\n      // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n      panOnScroll ? 150 : 0);\n    }\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter(_ref40) {\n  let {\n    zoomActivationKeyPressed,\n    zoomOnScroll,\n    zoomOnPinch,\n    panOnDrag,\n    panOnScroll,\n    zoomOnDoubleClick,\n    userSelectionActive,\n    noWheelClassName,\n    noPanClassName,\n    lib\n  } = _ref40;\n  return event => {\n    const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n    const pinchZoom = zoomOnPinch && event.ctrlKey;\n    if (event.button === 1 && event.type === 'mousedown' && (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n      return true;\n    }\n    // if all interactions are disabled, we prevent all zoom events\n    if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n      return false;\n    }\n    // during a selection we prevent all other interactions\n    if (userSelectionActive) {\n      return false;\n    }\n    // if the target element is inside an element with the nowheel class, we prevent zooming\n    if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n      return false;\n    }\n    // if the target element is inside an element with the nopan class, we prevent panning\n    if (isWrappedWithClass(event, noPanClassName) && (event.type !== 'wheel' || panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed)) {\n      return false;\n    }\n    if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n      return false;\n    }\n    if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n      event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n      return false;\n    }\n    // when there is no scroll handling enabled, we prevent all wheel events\n    if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n      return false;\n    }\n    // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n    if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n      return false;\n    }\n    // if the pane is only movable using allowed clicks\n    if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n      return false;\n    }\n    // We only allow right clicks if pan on drag is set to right click\n    const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;\n    // default filter for d3-zoom\n    return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n  };\n}\nfunction XYPanZoom(_ref41) {\n  let {\n    domNode,\n    minZoom,\n    maxZoom,\n    paneClickDistance,\n    translateExtent,\n    viewport,\n    onPanZoom,\n    onPanZoomStart,\n    onPanZoomEnd,\n    onDraggingChange\n  } = _ref41;\n  const zoomPanValues = {\n    isZoomingOrPanning: false,\n    usedRightMouseButton: false,\n    prevViewport: {\n      x: 0,\n      y: 0,\n      zoom: 0\n    },\n    mouseButton: 0,\n    timerId: undefined,\n    panScrollTimeout: undefined,\n    isPanScrolling: false\n  };\n  const bbox = domNode.getBoundingClientRect();\n  const d3ZoomInstance = zoom().clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance).scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n  const d3Selection = select(domNode).call(d3ZoomInstance);\n  setViewportConstrained({\n    x: viewport.x,\n    y: viewport.y,\n    zoom: clamp(viewport.zoom, minZoom, maxZoom)\n  }, [[0, 0], [bbox.width, bbox.height]], translateExtent);\n  const d3ZoomHandler = d3Selection.on('wheel.zoom');\n  const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n  d3ZoomInstance.wheelDelta(wheelDelta);\n  function setTransform(transform, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  // public functions\n  function update(_ref42) {\n    let {\n      noWheelClassName,\n      noPanClassName,\n      onPaneContextMenu,\n      userSelectionActive,\n      panOnScroll,\n      panOnDrag,\n      panOnScrollMode,\n      panOnScrollSpeed,\n      preventScrolling,\n      zoomOnPinch,\n      zoomOnScroll,\n      zoomOnDoubleClick,\n      zoomActivationKeyPressed,\n      lib,\n      onTransformChange\n    } = _ref42;\n    if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n      destroy();\n    }\n    const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n    const wheelHandler = isPanOnScroll ? createPanOnScrollHandler({\n      zoomPanValues,\n      noWheelClassName,\n      d3Selection,\n      d3Zoom: d3ZoomInstance,\n      panOnScrollMode,\n      panOnScrollSpeed,\n      zoomOnPinch,\n      onPanZoomStart,\n      onPanZoom,\n      onPanZoomEnd\n    }) : createZoomOnScrollHandler({\n      noWheelClassName,\n      preventScrolling,\n      d3ZoomHandler\n    });\n    d3Selection.on('wheel.zoom', wheelHandler, {\n      passive: false\n    });\n    if (!userSelectionActive) {\n      // pan zoom start\n      const startHandler = createPanZoomStartHandler({\n        zoomPanValues,\n        onDraggingChange,\n        onPanZoomStart\n      });\n      d3ZoomInstance.on('start', startHandler);\n      // pan zoom\n      const panZoomHandler = createPanZoomHandler({\n        zoomPanValues,\n        panOnDrag,\n        onPaneContextMenu: !!onPaneContextMenu,\n        onPanZoom,\n        onTransformChange\n      });\n      d3ZoomInstance.on('zoom', panZoomHandler);\n      // pan zoom end\n      const panZoomEndHandler = createPanZoomEndHandler({\n        zoomPanValues,\n        panOnDrag,\n        panOnScroll,\n        onPaneContextMenu,\n        onPanZoomEnd,\n        onDraggingChange\n      });\n      d3ZoomInstance.on('end', panZoomEndHandler);\n    }\n    const filter = createFilter({\n      zoomActivationKeyPressed,\n      panOnDrag,\n      zoomOnScroll,\n      panOnScroll,\n      zoomOnDoubleClick,\n      zoomOnPinch,\n      userSelectionActive,\n      noPanClassName,\n      noWheelClassName,\n      lib\n    });\n    d3ZoomInstance.filter(filter);\n    // We cannot add zoomOnDoubleClick to the filter above because\n    // double tapping on touch screens circumvents the filter and\n    // dblclick.zoom is fired on the selection directly\n    if (zoomOnDoubleClick) {\n      d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n    } else {\n      d3Selection.on('dblclick.zoom', null);\n    }\n  }\n  function destroy() {\n    d3ZoomInstance.on('zoom', null);\n  }\n  async function setViewportConstrained(viewport, extent, translateExtent) {\n    const nextTransform = viewportToTransform(viewport);\n    const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n    if (contrainedTransform) {\n      await setTransform(contrainedTransform);\n    }\n    return new Promise(resolve => resolve(contrainedTransform));\n  }\n  async function setViewport(viewport, options) {\n    const nextTransform = viewportToTransform(viewport);\n    await setTransform(nextTransform, options);\n    return new Promise(resolve => resolve(nextTransform));\n  }\n  function syncViewport(viewport) {\n    if (d3Selection) {\n      const nextTransform = viewportToTransform(viewport);\n      const currentTransform = d3Selection.property('__zoom');\n      if (currentTransform.k !== viewport.zoom || currentTransform.x !== viewport.x || currentTransform.y !== viewport.y) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        d3ZoomInstance?.transform(d3Selection, nextTransform, null, {\n          sync: true\n        });\n      }\n    }\n  }\n  function getViewport() {\n    const transform = d3Selection ? zoomTransform(d3Selection.node()) : {\n      x: 0,\n      y: 0,\n      k: 1\n    };\n    return {\n      x: transform.x,\n      y: transform.y,\n      zoom: transform.k\n    };\n  }\n  function scaleTo(zoom, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function scaleBy(factor, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function setScaleExtent(scaleExtent) {\n    d3ZoomInstance?.scaleExtent(scaleExtent);\n  }\n  function setTranslateExtent(translateExtent) {\n    d3ZoomInstance?.translateExtent(translateExtent);\n  }\n  function setClickDistance(distance) {\n    const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n    d3ZoomInstance?.clickDistance(validDistance);\n  }\n  return {\n    update,\n    destroy,\n    setViewport,\n    setViewportConstrained,\n    getViewport,\n    scaleTo,\n    scaleBy,\n    setScaleExtent,\n    setTranslateExtent,\n    syncViewport,\n    setClickDistance\n  };\n}\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n  ResizeControlVariant[\"Line\"] = \"line\";\n  ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection(_ref43) {\n  let {\n    width,\n    prevWidth,\n    height,\n    prevHeight,\n    affectsX,\n    affectsY\n  } = _ref43;\n  const deltaWidth = width - prevWidth;\n  const deltaHeight = height - prevHeight;\n  const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n  if (deltaWidth && affectsX) {\n    direction[0] = direction[0] * -1;\n  }\n  if (deltaHeight && affectsY) {\n    direction[1] = direction[1] * -1;\n  }\n  return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n  const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n  const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n  const affectsX = controlPosition.includes('left');\n  const affectsY = controlPosition.includes('top');\n  return {\n    isHorizontal,\n    isVertical,\n    affectsX,\n    affectsY\n  };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n  return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n  return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n  return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n  return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n  let {\n    affectsX,\n    affectsY\n  } = controlDirection;\n  const {\n    isHorizontal,\n    isVertical\n  } = controlDirection;\n  const isDiagonal = isHorizontal && isVertical;\n  const {\n    xSnapped,\n    ySnapped\n  } = pointerPosition;\n  const {\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight\n  } = boundaries;\n  const {\n    x: startX,\n    y: startY,\n    width: startWidth,\n    height: startHeight,\n    aspectRatio\n  } = startValues;\n  let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n  let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n  const newWidth = startWidth + (affectsX ? -distX : distX);\n  const newHeight = startHeight + (affectsY ? -distY : distY);\n  const originOffsetX = -nodeOrigin[0] * startWidth;\n  const originOffsetY = -nodeOrigin[1] * startHeight;\n  // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n  let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n  let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n  // Check if extent is restricting the resize\n  if (extent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n    } else if (!affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n    }\n    if (affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n    } else if (!affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the child extent is restricting the resize\n  if (childExtent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n    } else if (!affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n    }\n    if (affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n    } else if (!affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the aspect ratio resizing of the other side is restricting the resize\n  if (keepAspectRatio) {\n    if (isHorizontal) {\n      // Check if the max dimensions might be restricting the resize\n      const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n      clampX = Math.max(clampX, aspectHeightClamp);\n      // Check if the extent is restricting the resize\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n      // Check if the child extent is restricting the resize\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n    }\n    // Do the same thing for vertical resizing\n    if (isVertical) {\n      const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n      clampY = Math.max(clampY, aspectWidthClamp);\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n    }\n  }\n  distY = distY + (distY < 0 ? clampY : -clampY);\n  distX = distX + (distX < 0 ? clampX : -clampX);\n  if (keepAspectRatio) {\n    if (isDiagonal) {\n      if (newWidth > newHeight * aspectRatio) {\n        distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n      } else {\n        distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n      }\n    } else {\n      if (isHorizontal) {\n        distY = distX / aspectRatio;\n        affectsY = affectsX;\n      } else {\n        distX = distY * aspectRatio;\n        affectsX = affectsY;\n      }\n    }\n  }\n  const x = affectsX ? startX + distX : startX;\n  const y = affectsY ? startY + distY : startY;\n  return {\n    width: startWidth + (affectsX ? -distX : distX),\n    height: startHeight + (affectsY ? -distY : distY),\n    x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n    y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y\n  };\n}\nconst initPrevValues = {\n  width: 0,\n  height: 0,\n  x: 0,\n  y: 0\n};\nconst initStartValues = {\n  ...initPrevValues,\n  pointerX: 0,\n  pointerY: 0,\n  aspectRatio: 1\n};\nfunction nodeToParentExtent(node) {\n  return [[0, 0], [node.measured.width, node.measured.height]];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n  const x = parent.position.x + child.position.x;\n  const y = parent.position.y + child.position.y;\n  const width = child.measured.width ?? 0;\n  const height = child.measured.height ?? 0;\n  const originOffsetX = nodeOrigin[0] * width;\n  const originOffsetY = nodeOrigin[1] * height;\n  return [[x - originOffsetX, y - originOffsetY], [x + width - originOffsetX, y + height - originOffsetY]];\n}\nfunction XYResizer(_ref44) {\n  let {\n    domNode,\n    nodeId,\n    getStoreItems,\n    onChange,\n    onEnd\n  } = _ref44;\n  const selection = select(domNode);\n  function update(_ref45) {\n    let {\n      controlPosition,\n      boundaries,\n      keepAspectRatio,\n      onResizeStart,\n      onResize,\n      onResizeEnd,\n      shouldResize\n    } = _ref45;\n    let prevValues = {\n      ...initPrevValues\n    };\n    let startValues = {\n      ...initStartValues\n    };\n    const controlDirection = getControlDirection(controlPosition);\n    let node = undefined;\n    let childNodes = [];\n    let parentNode = undefined; // Needed to fix expandParent\n    let parentExtent = undefined;\n    let childExtent = undefined;\n    const dragHandler = drag().on('start', event => {\n      const {\n        nodeLookup,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin\n      } = getStoreItems();\n      node = nodeLookup.get(nodeId);\n      if (!node) {\n        return;\n      }\n      const {\n        xSnapped,\n        ySnapped\n      } = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      prevValues = {\n        width: node.measured.width ?? 0,\n        height: node.measured.height ?? 0,\n        x: node.position.x ?? 0,\n        y: node.position.y ?? 0\n      };\n      startValues = {\n        ...prevValues,\n        pointerX: xSnapped,\n        pointerY: ySnapped,\n        aspectRatio: prevValues.width / prevValues.height\n      };\n      parentNode = undefined;\n      if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n        parentNode = nodeLookup.get(node.parentId);\n        parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n      }\n      // Collect all child nodes to correct their relative positions when top/left changes\n      // Determine largest minimal extent the parent node is allowed to resize to\n      childNodes = [];\n      childExtent = undefined;\n      for (const [childId, child] of nodeLookup) {\n        if (child.parentId === nodeId) {\n          childNodes.push({\n            id: childId,\n            position: {\n              ...child.position\n            },\n            extent: child.extent\n          });\n          if (child.extent === 'parent' || child.expandParent) {\n            const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n            if (childExtent) {\n              childExtent = [[Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])], [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])]];\n            } else {\n              childExtent = extent;\n            }\n          }\n        }\n      }\n      onResizeStart?.(event, {\n        ...prevValues\n      });\n    }).on('drag', event => {\n      const {\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin: storeNodeOrigin\n      } = getStoreItems();\n      const pointerPosition = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      const childChanges = [];\n      if (!node) {\n        return;\n      }\n      const {\n        x: prevX,\n        y: prevY,\n        width: prevWidth,\n        height: prevHeight\n      } = prevValues;\n      const change = {};\n      const nodeOrigin = node.origin ?? storeNodeOrigin;\n      const {\n        width,\n        height,\n        x,\n        y\n      } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n      const isWidthChange = width !== prevWidth;\n      const isHeightChange = height !== prevHeight;\n      const isXPosChange = x !== prevX && isWidthChange;\n      const isYPosChange = y !== prevY && isHeightChange;\n      if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n        return;\n      }\n      if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n        change.x = isXPosChange ? x : prevValues.x;\n        change.y = isYPosChange ? y : prevValues.y;\n        prevValues.x = change.x;\n        prevValues.y = change.y;\n        // when top/left changes, correct the relative positions of child nodes\n        // so that they stay in the same position\n        if (childNodes.length > 0) {\n          const xChange = x - prevX;\n          const yChange = y - prevY;\n          for (const childNode of childNodes) {\n            childNode.position = {\n              x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n              y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight)\n            };\n            childChanges.push(childNode);\n          }\n        }\n      }\n      if (isWidthChange || isHeightChange) {\n        change.width = isWidthChange ? width : prevValues.width;\n        change.height = isHeightChange ? height : prevValues.height;\n        prevValues.width = change.width;\n        prevValues.height = change.height;\n      }\n      // Fix expandParent when resizing from top/left\n      if (parentNode && node.expandParent) {\n        const xLimit = nodeOrigin[0] * (change.width ?? 0);\n        if (change.x && change.x < xLimit) {\n          prevValues.x = xLimit;\n          startValues.x = startValues.x - (change.x - xLimit);\n        }\n        const yLimit = nodeOrigin[1] * (change.height ?? 0);\n        if (change.y && change.y < yLimit) {\n          prevValues.y = yLimit;\n          startValues.y = startValues.y - (change.y - yLimit);\n        }\n      }\n      const direction = getResizeDirection({\n        width: prevValues.width,\n        prevWidth,\n        height: prevValues.height,\n        prevHeight,\n        affectsX: controlDirection.affectsX,\n        affectsY: controlDirection.affectsY\n      });\n      const nextValues = {\n        ...prevValues,\n        direction\n      };\n      const callResize = shouldResize?.(event, nextValues);\n      if (callResize === false) {\n        return;\n      }\n      onResize?.(event, nextValues);\n      onChange(change, childChanges);\n    }).on('end', event => {\n      onResizeEnd?.(event, {\n        ...prevValues\n      });\n      onEnd?.();\n    });\n    selection.call(dragHandler);\n  }\n  function destroy() {\n    selection.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };","map":{"version":3,"names":["drag","select","pointer","zoom","zoomIdentity","zoomTransform","errorMessages","error001","error002","error003","nodeType","error004","error005","error006","error007","id","error009","type","error008","handleType","_ref","sourceHandle","targetHandle","error010","error011","edgeType","error012","error013","lib","arguments","length","undefined","infiniteExtent","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","elementSelectionKeys","ConnectionMode","PanOnScrollMode","SelectionMode","initialConnection","inProgress","isValid","from","fromHandle","fromPosition","fromNode","to","toHandle","toPosition","toNode","ConnectionLineType","MarkerType","Position","oppositePosition","Left","Right","Top","Bottom","areConnectionMapsEqual","a","b","size","key","keys","has","handleConnectionChange","cb","diff","forEach","connection","push","getConnectionStatus","isEdgeBase","element","isNodeBase","isInternalNodeBase","getOutgoers","node","nodes","edges","outgoerIds","Set","edge","source","add","target","filter","n","getIncomers","incomersIds","getNodePositionWithOrigin","nodeOrigin","width","height","getNodeDimensions","origin","offsetX","offsetY","x","position","y","getNodesBounds","params","nodeLookup","process","env","NODE_ENV","console","warn","box","reduce","currBox","nodeOrId","isId","currentNode","get","nodeBox","nodeToBox","x2","y2","getBoundsOfBoxes","Infinity","boxToRect","getInternalNodesBounds","getNodesInside","rect","tx","ty","tScale","partially","excludeNonSelectableNodes","paneRect","pointToRendererPoint","visibleNodes","values","measured","selectable","hidden","initialWidth","initialHeight","overlappingArea","getOverlappingArea","nodeToRect","area","partiallyVisible","forceInitialRender","internals","handleBounds","isVisible","dragging","getConnectedEdges","nodeIds","getFitViewNodes","options","fitViewNodes","Map","optionNodeIds","map","includeHiddenNodes","set","fitView","_ref2","panZoom","minZoom","maxZoom","Promise","resolve","bounds","viewport","getViewportForBounds","padding","setViewport","duration","calculateNodePosition","_ref3","nodeId","nextPosition","nodeExtent","onError","parentNode","parentId","parentX","parentY","positionAbsolute","extent","expandParent","parentWidth","parentHeight","isCoordinateExtent","clampPosition","getElementsToRemove","_ref4","nodesToRemove","edgesToRemove","onBeforeDelete","matchingNodes","deletable","isIncluded","parentHit","find","edgeIds","deletableEdges","connectedEdges","matchingEdges","e","onBeforeDeleteResult","clamp","val","min","max","Math","dimensions","clampPositionToParent","childPosition","childDimensions","parent","calcAutoPanVelocity","value","abs","calcAutoPan","pos","speed","distance","xMovement","yMovement","box1","box2","rectToBox","_ref5","_ref6","getBoundsOfRects","rect1","rect2","rectA","rectB","xOverlap","yOverlap","ceil","isRectObject","obj","isNumeric","isNaN","isFinite","devWarn","message","snapPosition","snapGrid","round","_ref7","_ref8","snapToGrid","rendererPointToPoint","_ref9","_ref10","xZoom","yZoom","clampedZoom","boundsCenterX","boundsCenterY","isMacOs","navigator","userAgent","indexOf","nodeHasDimensions","evaluateAbsolutePosition","nextParentId","getPointerPosition","event","_ref11","transform","getEventPosition","pointerPos","xSnapped","ySnapped","getDimensions","offsetWidth","offsetHeight","getHostForElement","getRootNode","window","document","inputTags","isInputDOMNode","composedPath","isInput","includes","nodeName","hasAttribute","closest","isMouseEvent","isMouse","evtX","clientX","touches","evtY","clientY","left","top","getHandleBounds","nodeElement","nodeBounds","handles","querySelectorAll","Array","handle","getBoundingClientRect","getAttribute","getBezierEdgeCenter","_ref12","sourceX","sourceY","targetX","targetY","sourceControlX","sourceControlY","targetControlX","targetControlY","centerX","centerY","calculateControlOffset","curvature","sqrt","getControlWithCurvature","_ref13","x1","y1","c","getBezierPath","_ref14","sourcePosition","targetPosition","labelX","labelY","getEdgeCenter","_ref15","xOffset","yOffset","getElevatedEdgeZIndex","_ref16","sourceNode","targetNode","selected","zIndex","elevateOnSelect","edgeOrConnectedNodeSelected","selectedZIndex","z","isEdgeVisible","_ref17","edgeBox","viewRect","getEdgeId","_ref18","connectionExists","some","el","addEdge","edgeParams","concat","reconnectEdge","oldEdge","newConnection","shouldReplaceId","oldEdgeId","rest","foundEdge","getStraightPath","_ref19","handleDirections","getDirection","_ref20","pow","getPoints","_ref21","center","offset","sourceDir","targetDir","sourceGapped","targetGapped","dir","dirAccessor","currDir","points","sourceGapOffset","targetGapOffset","defaultCenterX","defaultCenterY","defaultOffsetX","defaultOffsetY","verticalSplit","horizontalSplit","sourceTarget","targetSource","gapOffset","dirAccessorOpposite","isSameDir","sourceGtTargetOppo","sourceLtTargetOppo","flipSourceTarget","sourceGapPoint","targetGapPoint","maxXDistance","maxYDistance","pathPoints","getBend","bendSize","xDir","yDir","getSmoothStepPath","_ref22","borderRadius","path","res","p","i","segment","isNodeInitialized","getEdgePosition","sourceHandleBounds","toHandleBounds","targetHandleBounds","getHandle$1","connectionMode","Strict","getHandlePosition","fallbackPosition","handleId","d","getMarkerId","marker","idPrefix","Object","sort","join","createMarkerIds","_ref23","defaultColor","defaultMarkerStart","defaultMarkerEnd","ids","markers","markerStart","markerEnd","markerId","color","localeCompare","getNodeToolbarTransform","nodeRect","align","alignmentOffset","shift","defaultOptions","elevateNodesOnSelect","defaults","adoptUserNodesDefaultOptions","checkEquality","mergeObjects","base","incoming","result","updateAbsolutePositions","parentLookup","_options","updateChildNode","positionWithOrigin","clampedPosition","adoptUserNodes","tmpLookup","selectedNodeZ","clear","userNode","internalNode","calculateZ","updateParentLookup","childNodes","calculateChildXYZ","positionChanged","childNode","absolutePosition","childZ","parentZ","handleExpandParent","children","changes","parentExpansions","child","parentRect","expandedRect","_ref24","xChange","yChange","newWidth","newHeight","widthChange","heightChange","setAttributes","updateNodeInternals","updates","domNode","viewportNode","querySelector","updatedInternals","style","getComputedStyle","m22","DOMMatrixReadOnly","parentExpandChildren","update","dimensionChanged","doUpdate","force","parentExpandChanges","panBy","_ref25","delta","translateExtent","nextViewport","setViewportConstrained","transformChanged","k","updateConnectionLookup","connectionLookup","edgeLookup","sourceKey","targetKey","prevSource","prevTarget","edgeId","shallowNodeData","_a","isArray","_b","is","data","isParentSelected","hasSelector","selector","current","matches","parentElement","getDragItems","nodesDraggable","mousePos","dragItems","draggable","getEventHandlerParams","_ref26","nodesFromDragItems","dragItem","XYDrag","_ref27","onNodeMouseDown","getStoreItems","onDragStart","onDrag","onDragStop","lastPos","autoPanId","autoPanStarted","mousePosition","containerBounds","dragStarted","d3Selection","abortDrag","_ref28","noDragClassName","handleSelector","isSelectable","nodeClickDistance","updateNodes","_ref29","dragEvent","onNodeDrag","onSelectionDrag","updateNodePositions","hasChange","nodesBox","adjustedNodeExtent","currentNodes","autoPan","autoPanSpeed","requestAnimationFrame","startDrag","multiSelectionActive","selectNodesOnDrag","onNodeDragStart","onSelectionDragStart","unselectNodesAndEdges","sourceEvent","d3DragInstance","clickDistance","on","nodeDragThreshold","autoPanOnNodeDrag","cancelAnimationFrame","onNodeDragStop","onSelectionDragStop","isDraggable","button","call","destroy","getNodesWithinDistance","ADDITIONAL_DISTANCE","getClosestHandle","connectionRadius","closestHandles","minDistance","closeNodes","allHandles","oppositeHandleType","getHandle","withAbsolutePosition","h","getHandleType","edgeUpdaterType","handleDomNode","classList","contains","isConnectionValid","isInsideConnectionRadius","isHandleValid","alwaysValid","onPointerDown","_ref30","isTarget","autoPanOnConnect","flowId","cancelConnection","onConnectStart","onConnect","onConnectEnd","isValidConnection","onReconnectEnd","updateConnection","getTransform","getFromHandle","doc","closestHandle","clickedHandle","elementFromPoint","fromHandleInternal","fromNodeInternal","previousConnection","onPointerMove","onPointerUp","isValidHandle","fromNodeId","fromHandleId","fromType","connectionState","finalConnectionState","removeEventListener","addEventListener","_ref31","handleBelow","handleToCheck","handleNodeId","connectable","connectableEnd","isConnectable","XYHandle","XYMinimap","_ref32","getViewScale","selection","_ref33","zoomStep","pannable","zoomable","inversePan","zoomHandler","pinchDelta","deltaY","deltaMode","nextZoom","scaleTo","panStart","panStartHandler","panHandler","panCurrent","panDelta","moveScale","log","zoomAndPanHandler","viewChanged","prevViewport","eventViewport","transformToViewport","viewportToTransform","_ref34","translate","scale","isWrappedWithClass","className","isRightClickPan","panOnDrag","usedButton","getD3Transition","onEnd","hasDuration","transition","wheelDelta","factor","ctrlKey","createPanOnScrollHandler","_ref35","zoomPanValues","noWheelClassName","d3Zoom","panOnScrollMode","panOnScrollSpeed","zoomOnPinch","onPanZoomStart","onPanZoom","onPanZoomEnd","preventDefault","stopImmediatePropagation","currentZoom","property","point","deltaNormalize","deltaX","Vertical","Horizontal","shiftKey","translateBy","internal","clearTimeout","panScrollTimeout","isPanScrolling","setTimeout","createZoomOnScrollHandler","_ref36","preventScrolling","d3ZoomHandler","preventZoom","createPanZoomStartHandler","_ref37","onDraggingChange","mouseButton","isZoomingOrPanning","createPanZoomHandler","_ref38","onPaneContextMenu","onTransformChange","usedRightMouseButton","sync","createPanZoomEndHandler","_ref39","panOnScroll","timerId","createFilter","_ref40","zoomActivationKeyPressed","zoomOnScroll","zoomOnDoubleClick","userSelectionActive","noPanClassName","zoomScroll","pinchZoom","buttonAllowed","XYPanZoom","_ref41","paneClickDistance","bbox","d3ZoomInstance","scaleExtent","d3DblClickZoomHandler","setTransform","_ref42","isPanOnScroll","wheelHandler","passive","startHandler","panZoomHandler","panZoomEndHandler","nextTransform","contrainedTransform","constrain","syncViewport","currentTransform","getViewport","scaleBy","setScaleExtent","setTranslateExtent","setClickDistance","validDistance","ResizeControlVariant","XY_RESIZER_HANDLE_POSITIONS","XY_RESIZER_LINE_POSITIONS","getResizeDirection","_ref43","prevWidth","prevHeight","affectsX","affectsY","deltaWidth","deltaHeight","direction","getControlDirection","controlPosition","isHorizontal","isVertical","getLowerExtentClamp","lowerExtent","lowerBound","getUpperExtentClamp","upperExtent","upperBound","getSizeClamp","minSize","maxSize","xor","getDimensionsAfterResize","startValues","controlDirection","pointerPosition","boundaries","keepAspectRatio","childExtent","isDiagonal","minWidth","maxWidth","minHeight","maxHeight","startX","startY","startWidth","startHeight","aspectRatio","distX","floor","pointerX","distY","pointerY","originOffsetX","originOffsetY","clampX","clampY","xExtentClamp","yExtentClamp","aspectHeightClamp","aspectExtentClamp","aspectWidthClamp","initPrevValues","initStartValues","nodeToParentExtent","nodeToChildExtent","XYResizer","_ref44","onChange","_ref45","onResizeStart","onResize","onResizeEnd","shouldResize","prevValues","parentExtent","dragHandler","childId","storeNodeOrigin","childChanges","prevX","prevY","change","isWidthChange","isHeightChange","isXPosChange","isYPosChange","xLimit","yLimit","nextValues","callResize"],"sources":["D:/NGS/NGS/node_modules/@xyflow/system/dist/esm/index.mjs"],"sourcesContent":["import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\n\nconst errorMessages = {\n    error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n    error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n    error003: (nodeType) => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n    error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n    error005: () => 'Only child nodes can use a parent extent.',\n    error006: () => \"Can't create edge. An edge needs a source and a target.\",\n    error007: (id) => `The old edge with id=${id} does not exist.`,\n    error009: (type) => `Marker type \"${type}\" doesn't exist.`,\n    error008: (handleType, { id, sourceHandle, targetHandle }) => `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n    error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n    error011: (edgeType) => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n    error012: (id) => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n    error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,\n};\nconst infiniteExtent = [\n    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\n    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\n];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\n\nvar ConnectionMode;\n(function (ConnectionMode) {\n    ConnectionMode[\"Strict\"] = \"strict\";\n    ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n    PanOnScrollMode[\"Free\"] = \"free\";\n    PanOnScrollMode[\"Vertical\"] = \"vertical\";\n    PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n    SelectionMode[\"Partial\"] = \"partial\";\n    SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n    inProgress: false,\n    isValid: null,\n    from: null,\n    fromHandle: null,\n    fromPosition: null,\n    fromNode: null,\n    to: null,\n    toHandle: null,\n    toPosition: null,\n    toNode: null,\n};\n\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n    ConnectionLineType[\"Bezier\"] = \"default\";\n    ConnectionLineType[\"Straight\"] = \"straight\";\n    ConnectionLineType[\"Step\"] = \"step\";\n    ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n    ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[\"Arrow\"] = \"arrow\";\n    MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\n\nvar Position;\n(function (Position) {\n    Position[\"Left\"] = \"left\";\n    Position[\"Top\"] = \"top\";\n    Position[\"Right\"] = \"right\";\n    Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n    [Position.Left]: Position.Right,\n    [Position.Right]: Position.Left,\n    [Position.Top]: Position.Bottom,\n    [Position.Bottom]: Position.Top,\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n    if (!a || !b || a.size !== b.size) {\n        return false;\n    }\n    if (!a.size && !b.size) {\n        return true;\n    }\n    for (const key of a.keys()) {\n        if (!b.has(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n    if (!cb) {\n        return;\n    }\n    const diff = [];\n    a.forEach((connection, key) => {\n        if (!b?.has(key)) {\n            diff.push(connection);\n        }\n    });\n    if (diff.length) {\n        cb(diff);\n    }\n}\nfunction getConnectionStatus(isValid) {\n    return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is useable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = (element) => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is useable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = (element) => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = (element) => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * Pass in a node, and get connected nodes where edge.source === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the source is the given node\n */\nconst getOutgoers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const outgoerIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.source === node.id) {\n            outgoerIds.add(edge.target);\n        }\n    });\n    return nodes.filter((n) => outgoerIds.has(n.id));\n};\n/**\n * Pass in a node, and get connected nodes where edge.target === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the target is the given node\n */\nconst getIncomers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const incomersIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.target === node.id) {\n            incomersIds.add(edge.source);\n        }\n    });\n    return nodes.filter((n) => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n    const { width, height } = getNodeDimensions(node);\n    const origin = node.origin ?? nodeOrigin;\n    const offsetX = width * origin[0];\n    const offsetY = height * origin[1];\n    return {\n        x: node.position.x - offsetX,\n        y: node.position.y - offsetY,\n    };\n};\n/**\n * Internal function for determining a bounding box that contains all given nodes in an array.\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\n * @returns Bounding box enclosing all nodes\n */\nconst getNodesBounds = (nodes, params = { nodeOrigin: [0, 0], nodeLookup: undefined }) => {\n    if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\n        console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\n    }\n    if (nodes.length === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    const box = nodes.reduce((currBox, nodeOrId) => {\n        const isId = typeof nodeOrId === 'string';\n        let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\n        if (params.nodeLookup) {\n            currentNode = isId\n                ? params.nodeLookup.get(nodeOrId)\n                : !isInternalNodeBase(nodeOrId)\n                    ? params.nodeLookup.get(nodeOrId.id)\n                    : nodeOrId;\n        }\n        const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : { x: 0, y: 0, x2: 0, y2: 0 };\n        return getBoundsOfBoxes(currBox, nodeBox);\n    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });\n    return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n    if (nodeLookup.size === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    let box = { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity };\n    nodeLookup.forEach((node) => {\n        if (params.filter === undefined || params.filter(node)) {\n            const nodeBox = nodeToBox(node);\n            box = getBoundsOfBoxes(box, nodeBox);\n        }\n    });\n    return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, \n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n    const paneRect = {\n        ...pointToRendererPoint(rect, [tx, ty, tScale]),\n        width: rect.width / tScale,\n        height: rect.height / tScale,\n    };\n    const visibleNodes = [];\n    for (const node of nodes.values()) {\n        const { measured, selectable = true, hidden = false } = node;\n        if ((excludeNonSelectableNodes && !selectable) || hidden) {\n            continue;\n        }\n        const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n        const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n        const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n        const area = (width ?? 0) * (height ?? 0);\n        const partiallyVisible = partially && overlappingArea > 0;\n        const forceInitialRender = !node.internals.handleBounds;\n        const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\n        if (isVisible || node.dragging) {\n            visibleNodes.push(node);\n        }\n    }\n    return visibleNodes;\n};\n/**\n * Get all connecting edges for a given set of nodes\n * @param nodes - Nodes you want to get the connected edges for\n * @param edges - All edges\n * @returns Array of edges that connect any of the given nodes with each other\n */\nconst getConnectedEdges = (nodes, edges) => {\n    const nodeIds = new Set();\n    nodes.forEach((node) => {\n        nodeIds.add(node.id);\n    });\n    return edges.filter((edge) => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n    const fitViewNodes = new Map();\n    const optionNodeIds = options?.nodes ? new Set(options.nodes.map((node) => node.id)) : null;\n    nodeLookup.forEach((n) => {\n        const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n        if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n            fitViewNodes.set(n.id, n);\n        }\n    });\n    return fitViewNodes;\n}\nasync function fitView({ nodes, width, height, panZoom, minZoom, maxZoom }, options) {\n    if (nodes.size === 0) {\n        return Promise.resolve(false);\n    }\n    const bounds = getInternalNodesBounds(nodes);\n    const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n    await panZoom.setViewport(viewport, { duration: options?.duration });\n    return Promise.resolve(true);\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition({ nodeId, nextPosition, nodeLookup, nodeOrigin = [0, 0], nodeExtent, onError, }) {\n    const node = nodeLookup.get(nodeId);\n    const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n    const { x: parentX, y: parentY } = parentNode ? parentNode.internals.positionAbsolute : { x: 0, y: 0 };\n    const origin = node.origin ?? nodeOrigin;\n    let extent = nodeExtent;\n    if (node.extent === 'parent' && !node.expandParent) {\n        if (!parentNode) {\n            onError?.('005', errorMessages['error005']());\n        }\n        else {\n            const parentWidth = parentNode.measured.width;\n            const parentHeight = parentNode.measured.height;\n            if (parentWidth && parentHeight) {\n                extent = [\n                    [parentX, parentY],\n                    [parentX + parentWidth, parentY + parentHeight],\n                ];\n            }\n        }\n    }\n    else if (parentNode && isCoordinateExtent(node.extent)) {\n        extent = [\n            [node.extent[0][0] + parentX, node.extent[0][1] + parentY],\n            [node.extent[1][0] + parentX, node.extent[1][1] + parentY],\n        ];\n    }\n    const positionAbsolute = isCoordinateExtent(extent)\n        ? clampPosition(nextPosition, extent, node.measured)\n        : nextPosition;\n    return {\n        position: {\n            x: positionAbsolute.x - parentX + node.measured.width * origin[0],\n            y: positionAbsolute.y - parentY + node.measured.height * origin[1],\n        },\n        positionAbsolute,\n    };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove({ nodesToRemove = [], edgesToRemove = [], nodes, edges, onBeforeDelete, }) {\n    const nodeIds = new Set(nodesToRemove.map((node) => node.id));\n    const matchingNodes = [];\n    for (const node of nodes) {\n        if (node.deletable === false) {\n            continue;\n        }\n        const isIncluded = nodeIds.has(node.id);\n        const parentHit = !isIncluded && node.parentId && matchingNodes.find((n) => n.id === node.parentId);\n        if (isIncluded || parentHit) {\n            matchingNodes.push(node);\n        }\n    }\n    const edgeIds = new Set(edgesToRemove.map((edge) => edge.id));\n    const deletableEdges = edges.filter((edge) => edge.deletable !== false);\n    const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n    const matchingEdges = connectedEdges;\n    for (const edge of deletableEdges) {\n        const isIncluded = edgeIds.has(edge.id);\n        if (isIncluded && !matchingEdges.find((e) => e.id === edge.id)) {\n            matchingEdges.push(edge);\n        }\n    }\n    if (!onBeforeDelete) {\n        return {\n            edges: matchingEdges,\n            nodes: matchingNodes,\n        };\n    }\n    const onBeforeDeleteResult = await onBeforeDelete({\n        nodes: matchingNodes,\n        edges: matchingEdges,\n    });\n    if (typeof onBeforeDeleteResult === 'boolean') {\n        return onBeforeDeleteResult ? { edges: matchingEdges, nodes: matchingNodes } : { edges: [], nodes: [] };\n    }\n    return onBeforeDeleteResult;\n}\n\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = { x: 0, y: 0 }, extent, dimensions) => ({\n    x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\n    y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0)),\n});\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\n    const { width: parentWidth, height: parentHeight } = getNodeDimensions(parent);\n    const { x: parentX, y: parentY } = parent.internals.positionAbsolute;\n    return clampPosition(childPosition, [\n        [parentX, parentY],\n        [parentX + parentWidth, parentY + parentHeight],\n    ], childDimensions);\n}\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n    if (value < min) {\n        return clamp(Math.abs(value - min), 1, min) / min;\n    }\n    else if (value > max) {\n        return -clamp(Math.abs(value - max), 1, min) / min;\n    }\n    return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n    const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n    const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n    return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n    x: Math.min(box1.x, box2.x),\n    y: Math.min(box1.y, box2.y),\n    x2: Math.max(box1.x2, box2.x2),\n    y2: Math.max(box1.y2, box2.y2),\n});\nconst rectToBox = ({ x, y, width, height }) => ({\n    x,\n    y,\n    x2: x + width,\n    y2: y + height,\n});\nconst boxToRect = ({ x, y, x2, y2 }) => ({\n    x,\n    y,\n    width: x2 - x,\n    height: y2 - y,\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n        y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0),\n    };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n    return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = (n) => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n    if (process.env.NODE_ENV === 'development') {\n        console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n    }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n    return {\n        x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n        y: snapGrid[1] * Math.round(position.y / snapGrid[1]),\n    };\n};\nconst pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n    const position = {\n        x: (x - tx) / tScale,\n        y: (y - ty) / tScale,\n    };\n    return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({ x, y }, [tx, ty, tScale]) => {\n    return {\n        x: x * tScale + tx,\n        y: y * tScale + ty,\n    };\n};\n/**\n * Returns a viewport that encloses the given bounds with optional padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport\n * @param width - Width of the viewport\n * @param height  - Height of the viewport\n * @param minZoom - Minimum zoom level of the resulting viewport\n * @param maxZoom - Maximum zoom level of the resulting viewport\n * @param padding - Optional padding around the bounds\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n  { x: 0, y: 0, width: 100, height: 100},\n  1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n    const xZoom = width / (bounds.width * (1 + padding));\n    const yZoom = height / (bounds.height * (1 + padding));\n    const zoom = Math.min(xZoom, yZoom);\n    const clampedZoom = clamp(zoom, minZoom, maxZoom);\n    const boundsCenterX = bounds.x + bounds.width / 2;\n    const boundsCenterY = bounds.y + bounds.height / 2;\n    const x = width / 2 - boundsCenterX * clampedZoom;\n    const y = height / 2 - boundsCenterY * clampedZoom;\n    return { x, y, zoom: clampedZoom };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n    return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n    return {\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n}\nfunction nodeHasDimensions(node) {\n    return ((node.measured?.width ?? node.width ?? node.initialWidth) !== undefined &&\n        (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined);\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position, dimensions = { width: 0, height: 0 }, parentId, nodeLookup, nodeOrigin) {\n    let nextParentId = parentId;\n    const positionAbsolute = { ...position };\n    while (nextParentId) {\n        const parent = nodeLookup.get(nextParentId);\n        nextParentId = parent?.parentId;\n        if (parent) {\n            const origin = parent.origin || nodeOrigin;\n            positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n            positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n        }\n    }\n    return positionAbsolute;\n}\n\nfunction getPointerPosition(event, { snapGrid = [0, 0], snapToGrid = false, transform }) {\n    const { x, y } = getEventPosition(event);\n    const pointerPos = pointToRendererPoint({ x, y }, transform);\n    const { x: xSnapped, y: ySnapped } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n    // we need the snapped position in order to be able to skip unnecessary drag events\n    return {\n        xSnapped,\n        ySnapped,\n        ...pointerPos,\n    };\n}\nconst getDimensions = (node) => ({\n    width: node.offsetWidth,\n    height: node.offsetHeight,\n});\nconst getHostForElement = (element) => element.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n    // using composed path for handling shadow dom\n    const target = (event.composedPath?.()?.[0] || event.target);\n    const isInput = inputTags.includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n    // when an input field is focused we don't want to trigger deletion or movement of nodes\n    return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = (event) => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n    const isMouse = isMouseEvent(event);\n    const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n    const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n    return {\n        x: evtX - (bounds?.left ?? 0),\n        y: evtY - (bounds?.top ?? 0),\n    };\n};\n// The handle bounds are calculated relative to the node element.\n// We store them in the internals object of the node in order to avoid\n// unnecessary recalculations.\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n    const handles = nodeElement.querySelectorAll(`.${type}`);\n    if (!handles || !handles.length) {\n        return null;\n    }\n    return Array.from(handles).map((handle) => {\n        const handleBounds = handle.getBoundingClientRect();\n        return {\n            id: handle.getAttribute('data-handleid'),\n            type,\n            nodeId,\n            position: handle.getAttribute('data-handlepos'),\n            x: (handleBounds.left - nodeBounds.left) / zoom,\n            y: (handleBounds.top - nodeBounds.top) / zoom,\n            ...getDimensions(handle),\n        };\n    });\n};\n\nfunction getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY, }) {\n    // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n    // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n    const offsetX = Math.abs(centerX - sourceX);\n    const offsetY = Math.abs(centerY - sourceY);\n    return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n    if (distance >= 0) {\n        return 0.5 * distance;\n    }\n    return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {\n    switch (pos) {\n        case Position.Left:\n            return [x1 - calculateControlOffset(x1 - x2, c), y1];\n        case Position.Right:\n            return [x1 + calculateControlOffset(x2 - x1, c), y1];\n        case Position.Top:\n            return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n        case Position.Bottom:\n            return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n    }\n}\n/**\n * Get a bezier path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @param params.curvature - The curvature of the bezier edge\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n});\n */\nfunction getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25, }) {\n    const [sourceControlX, sourceControlY] = getControlWithCurvature({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n        c: curvature,\n    });\n    const [targetControlX, targetControlY] = getControlWithCurvature({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY,\n        c: curvature,\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY,\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY,\n    ];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({ sourceX, sourceY, targetX, targetY, }) {\n    const xOffset = Math.abs(targetX - sourceX) / 2;\n    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n    const yOffset = Math.abs(targetY - sourceY) / 2;\n    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n    return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({ sourceNode, targetNode, selected = false, zIndex = 0, elevateOnSelect = false, }) {\n    if (!elevateOnSelect) {\n        return zIndex;\n    }\n    const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n    const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n    return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({ sourceNode, targetNode, width, height, transform }) {\n    const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n    if (edgeBox.x === edgeBox.x2) {\n        edgeBox.x2 += 1;\n    }\n    if (edgeBox.y === edgeBox.y2) {\n        edgeBox.y2 += 1;\n    }\n    const viewRect = {\n        x: -transform[0] / transform[2],\n        y: -transform[1] / transform[2],\n        width: width / transform[2],\n        height: height / transform[2],\n    };\n    return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n    return edges.some((el) => el.source === edge.source &&\n        el.target === edge.target &&\n        (el.sourceHandle === edge.sourceHandle || (!el.sourceHandle && !edge.sourceHandle)) &&\n        (el.targetHandle === edge.targetHandle || (!el.targetHandle && !edge.targetHandle)));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges\n * @remarks It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an Edge or a Connection you want to add\n * @param edges -  The array of all current edges\n * @returns A new array of edges with the new edge added\n */\nconst addEdge = (edgeParams, edges) => {\n    if (!edgeParams.source || !edgeParams.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    let edge;\n    if (isEdgeBase(edgeParams)) {\n        edge = { ...edgeParams };\n    }\n    else {\n        edge = {\n            ...edgeParams,\n            id: getEdgeId(edgeParams),\n        };\n    }\n    if (connectionExists(edge, edges)) {\n        return edges;\n    }\n    if (edge.sourceHandle === null) {\n        delete edge.sourceHandle;\n    }\n    if (edge.targetHandle === null) {\n        delete edge.targetHandle;\n    }\n    return edges.concat(edge);\n};\n/**\n * A handy utility to reconnect an existing edge with new properties\n * @param oldEdge - The edge you want to update\n * @param newConnection - The new connection you want to update the edge with\n * @param edges - The array of all current edges\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\n * @returns the updated edges array\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = { shouldReplaceId: true }) => {\n    const { id: oldEdgeId, ...rest } = oldEdge;\n    if (!newConnection.source || !newConnection.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    const foundEdge = edges.find((e) => e.id === oldEdge.id);\n    if (!foundEdge) {\n        devWarn('007', errorMessages['error007'](oldEdgeId));\n        return edges;\n    }\n    // Remove old edge and create the new edge with parameters of old edge.\n    const edge = {\n        ...rest,\n        id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n        source: newConnection.source,\n        target: newConnection.target,\n        sourceHandle: newConnection.sourceHandle,\n        targetHandle: newConnection.targetHandle,\n    };\n    return edges.filter((e) => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Get a straight path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getStraightPath({ sourceX, sourceY, targetX, targetY, }) {\n    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n    });\n    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\nconst handleDirections = {\n    [Position.Left]: { x: -1, y: 0 },\n    [Position.Right]: { x: 1, y: 0 },\n    [Position.Top]: { x: 0, y: -1 },\n    [Position.Bottom]: { x: 0, y: 1 },\n};\nconst getDirection = ({ source, sourcePosition = Position.Bottom, target, }) => {\n    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n        return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };\n    }\n    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset, }) {\n    const sourceDir = handleDirections[sourcePosition];\n    const targetDir = handleDirections[targetPosition];\n    const sourceGapped = { x: source.x + sourceDir.x * offset, y: source.y + sourceDir.y * offset };\n    const targetGapped = { x: target.x + targetDir.x * offset, y: target.y + targetDir.y * offset };\n    const dir = getDirection({\n        source: sourceGapped,\n        sourcePosition,\n        target: targetGapped,\n    });\n    const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n    const currDir = dir[dirAccessor];\n    let points = [];\n    let centerX, centerY;\n    const sourceGapOffset = { x: 0, y: 0 };\n    const targetGapOffset = { x: 0, y: 0 };\n    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n    });\n    // opposite handle positions, default case\n    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n        centerX = center.x ?? defaultCenterX;\n        centerY = center.y ?? defaultCenterY;\n        //    --->\n        //    |\n        // >---\n        const verticalSplit = [\n            { x: centerX, y: sourceGapped.y },\n            { x: centerX, y: targetGapped.y },\n        ];\n        //    |\n        //  ---\n        //  |\n        const horizontalSplit = [\n            { x: sourceGapped.x, y: centerY },\n            { x: targetGapped.x, y: centerY },\n        ];\n        if (sourceDir[dirAccessor] === currDir) {\n            points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n        }\n        else {\n            points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n        }\n    }\n    else {\n        // sourceTarget means we take x from source and y from target, targetSource is the opposite\n        const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];\n        const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];\n        // this handles edges with same handle positions\n        if (dirAccessor === 'x') {\n            points = sourceDir.x === currDir ? targetSource : sourceTarget;\n        }\n        else {\n            points = sourceDir.y === currDir ? sourceTarget : targetSource;\n        }\n        if (sourcePosition === targetPosition) {\n            const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n            // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n            if (diff <= offset) {\n                const gapOffset = Math.min(offset - 1, offset - diff);\n                if (sourceDir[dirAccessor] === currDir) {\n                    sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n                else {\n                    targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n            }\n        }\n        // these are conditions for handling mixed handle positions like Right -> Bottom for example\n        if (sourcePosition !== targetPosition) {\n            const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n            const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n            const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n            const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n            const flipSourceTarget = (sourceDir[dirAccessor] === 1 && ((!isSameDir && sourceGtTargetOppo) || (isSameDir && sourceLtTargetOppo))) ||\n                (sourceDir[dirAccessor] !== 1 && ((!isSameDir && sourceLtTargetOppo) || (isSameDir && sourceGtTargetOppo)));\n            if (flipSourceTarget) {\n                points = dirAccessor === 'x' ? sourceTarget : targetSource;\n            }\n        }\n        const sourceGapPoint = { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y };\n        const targetGapPoint = { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y };\n        const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n        const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n        // we want to place the label on the longest segment of the edge\n        if (maxXDistance >= maxYDistance) {\n            centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n            centerY = points[0].y;\n        }\n        else {\n            centerX = points[0].x;\n            centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n        }\n    }\n    const pathPoints = [\n        source,\n        { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },\n        ...points,\n        { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },\n        target,\n    ];\n    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n    const { x, y } = b;\n    // no bend\n    if ((a.x === x && x === c.x) || (a.y === y && y === c.y)) {\n        return `L${x} ${y}`;\n    }\n    // first segment is horizontal\n    if (a.y === y) {\n        const xDir = a.x < c.x ? -1 : 1;\n        const yDir = a.y < c.y ? 1 : -1;\n        return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n    }\n    const xDir = a.x < c.x ? 1 : -1;\n    const yDir = a.y < c.y ? -1 : 1;\n    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * Get a smooth step path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset = 20, }) {\n    const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n        source: { x: sourceX, y: sourceY },\n        sourcePosition,\n        target: { x: targetX, y: targetY },\n        targetPosition,\n        center: { x: centerX, y: centerY },\n        offset,\n    });\n    const path = points.reduce((res, p, i) => {\n        let segment = '';\n        if (i > 0 && i < points.length - 1) {\n            segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n        }\n        else {\n            segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n        }\n        res += segment;\n        return res;\n    }, '');\n    return [path, labelX, labelY, offsetX, offsetY];\n}\n\nfunction isNodeInitialized(node) {\n    return (node &&\n        !!(node.internals.handleBounds || node.handles?.length) &&\n        !!(node.measured.width || node.width || node.initialWidth));\n}\nfunction getEdgePosition(params) {\n    const { sourceNode, targetNode } = params;\n    if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n        return null;\n    }\n    const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n    const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n    const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\n    const targetHandle = getHandle$1(\n    // when connection type is loose we can define all handles as sources and connect source -> source\n    params.connectionMode === ConnectionMode.Strict\n        ? targetHandleBounds?.target ?? []\n        : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n    if (!sourceHandle || !targetHandle) {\n        params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n            id: params.id,\n            sourceHandle: params.sourceHandle,\n            targetHandle: params.targetHandle,\n        }));\n        return null;\n    }\n    const sourcePosition = sourceHandle?.position || Position.Bottom;\n    const targetPosition = targetHandle?.position || Position.Top;\n    const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n    const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n    return {\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n        sourcePosition,\n        targetPosition,\n    };\n}\nfunction toHandleBounds(handles) {\n    if (!handles) {\n        return null;\n    }\n    const source = [];\n    const target = [];\n    for (const handle of handles) {\n        handle.width = handle.width ?? 1;\n        handle.height = handle.height ?? 1;\n        if (handle.type === 'source') {\n            source.push(handle);\n        }\n        else if (handle.type === 'target') {\n            target.push(handle);\n        }\n    }\n    return {\n        source,\n        target,\n    };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n    const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n    const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n    const { width, height } = handle ?? getNodeDimensions(node);\n    if (center) {\n        return { x: x + width / 2, y: y + height / 2 };\n    }\n    const position = handle?.position ?? fallbackPosition;\n    switch (position) {\n        case Position.Top:\n            return { x: x + width / 2, y };\n        case Position.Right:\n            return { x: x + width, y: y + height / 2 };\n        case Position.Bottom:\n            return { x: x + width / 2, y: y + height };\n        case Position.Left:\n            return { x, y: y + height / 2 };\n    }\n}\nfunction getHandle$1(bounds, handleId) {\n    if (!bounds) {\n        return null;\n    }\n    // if no handleId is given, we use the first handle, otherwise we check for the id\n    return (!handleId ? bounds[0] : bounds.find((d) => d.id === handleId)) || null;\n}\n\nfunction getMarkerId(marker, id) {\n    if (!marker) {\n        return '';\n    }\n    if (typeof marker === 'string') {\n        return marker;\n    }\n    const idPrefix = id ? `${id}__` : '';\n    return `${idPrefix}${Object.keys(marker)\n        .sort()\n        .map((key) => `${key}=${marker[key]}`)\n        .join('&')}`;\n}\nfunction createMarkerIds(edges, { id, defaultColor, defaultMarkerStart, defaultMarkerEnd, }) {\n    const ids = new Set();\n    return edges\n        .reduce((markers, edge) => {\n        [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach((marker) => {\n            if (marker && typeof marker === 'object') {\n                const markerId = getMarkerId(marker, id);\n                if (!ids.has(markerId)) {\n                    markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });\n                    ids.add(markerId);\n                }\n            }\n        });\n        return markers;\n    }, [])\n        .sort((a, b) => a.id.localeCompare(b.id));\n}\n\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n    let alignmentOffset = 0.5;\n    if (align === 'start') {\n        alignmentOffset = 0;\n    }\n    else if (align === 'end') {\n        alignmentOffset = 1;\n    }\n    // position === Position.Top\n    // we set the x any y position of the toolbar based on the nodes position\n    let pos = [\n        (nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x,\n        nodeRect.y * viewport.zoom + viewport.y - offset,\n    ];\n    // and than shift it based on the alignment. The shift values are in %.\n    let shift = [-100 * alignmentOffset, -100];\n    switch (position) {\n        case Position.Right:\n            pos = [\n                (nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [0, -100 * alignmentOffset];\n            break;\n        case Position.Bottom:\n            pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n            shift[1] = 0;\n            break;\n        case Position.Left:\n            pos = [\n                nodeRect.x * viewport.zoom + viewport.x - offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [-100, -100 * alignmentOffset];\n            break;\n    }\n    return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\n\nconst defaultOptions = {\n    nodeOrigin: [0, 0],\n    nodeExtent: infiniteExtent,\n    elevateNodesOnSelect: true,\n    defaults: {},\n};\nconst adoptUserNodesDefaultOptions = {\n    ...defaultOptions,\n    checkEquality: true,\n};\nfunction mergeObjects(base, incoming) {\n    const result = { ...base };\n    for (const key in incoming) {\n        if (incoming[key] !== undefined) {\n            // typecast is safe here, because we check for undefined\n            result[key] = incoming[key];\n        }\n    }\n    return result;\n}\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n    const _options = mergeObjects(defaultOptions, options);\n    for (const node of nodeLookup.values()) {\n        if (node.parentId) {\n            updateChildNode(node, nodeLookup, parentLookup, _options);\n        }\n        else {\n            const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\n            const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\n            node.internals.positionAbsolute = clampedPosition;\n        }\n    }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n    const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\n    const tmpLookup = new Map(nodeLookup);\n    const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\n    nodeLookup.clear();\n    parentLookup.clear();\n    for (const userNode of nodes) {\n        let internalNode = tmpLookup.get(userNode.id);\n        if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        else {\n            const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\n            const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\n            internalNode = {\n                ..._options.defaults,\n                ...userNode,\n                measured: {\n                    width: userNode.measured?.width,\n                    height: userNode.measured?.height,\n                },\n                internals: {\n                    positionAbsolute: clampedPosition,\n                    // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n                    handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n                    z: calculateZ(userNode, selectedNodeZ),\n                    userNode,\n                },\n            };\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        if (userNode.parentId) {\n            updateChildNode(internalNode, nodeLookup, parentLookup, options);\n        }\n    }\n}\nfunction updateParentLookup(node, parentLookup) {\n    if (!node.parentId) {\n        return;\n    }\n    const childNodes = parentLookup.get(node.parentId);\n    if (childNodes) {\n        childNodes.set(node.id, node);\n    }\n    else {\n        parentLookup.set(node.parentId, new Map([[node.id, node]]));\n    }\n}\n/**\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\n */\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\n    const { elevateNodesOnSelect, nodeOrigin, nodeExtent } = mergeObjects(defaultOptions, options);\n    const parentId = node.parentId;\n    const parentNode = nodeLookup.get(parentId);\n    if (!parentNode) {\n        console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n        return;\n    }\n    updateParentLookup(node, parentLookup);\n    const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n    const { x, y, z } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\n    const { positionAbsolute } = node.internals;\n    const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\n    if (positionChanged || z !== node.internals.z) {\n        node.internals = {\n            ...node.internals,\n            positionAbsolute: positionChanged ? { x, y } : positionAbsolute,\n            z,\n        };\n    }\n}\nfunction calculateZ(node, selectedNodeZ) {\n    return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\n    const { x: parentX, y: parentY } = parentNode.internals.positionAbsolute;\n    const childDimensions = getNodeDimensions(childNode);\n    const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\n    const clampedPosition = isCoordinateExtent(childNode.extent)\n        ? clampPosition(positionWithOrigin, childNode.extent, childDimensions)\n        : positionWithOrigin;\n    let absolutePosition = clampPosition({ x: parentX + clampedPosition.x, y: parentY + clampedPosition.y }, nodeExtent, childDimensions);\n    if (childNode.extent === 'parent') {\n        absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\n    }\n    const childZ = calculateZ(childNode, selectedNodeZ);\n    const parentZ = parentNode.internals.z ?? 0;\n    return {\n        x: absolutePosition.x,\n        y: absolutePosition.y,\n        z: parentZ > childZ ? parentZ : childZ,\n    };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n    const changes = [];\n    const parentExpansions = new Map();\n    // determine the expanded rectangle the child nodes would take for each parent\n    for (const child of children) {\n        const parent = nodeLookup.get(child.parentId);\n        if (!parent) {\n            continue;\n        }\n        const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n        const expandedRect = getBoundsOfRects(parentRect, child.rect);\n        parentExpansions.set(child.parentId, { expandedRect, parent });\n    }\n    if (parentExpansions.size > 0) {\n        parentExpansions.forEach(({ expandedRect, parent }, parentId) => {\n            // determine the position & dimensions of the parent\n            const positionAbsolute = parent.internals.positionAbsolute;\n            const dimensions = getNodeDimensions(parent);\n            const origin = parent.origin ?? nodeOrigin;\n            // determine how much the parent expands in width and position\n            const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n            const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n            const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n            const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n            const widthChange = (newWidth - dimensions.width) * origin[0];\n            const heightChange = (newHeight - dimensions.height) * origin[1];\n            // We need to correct the position of the parent node if the origin is not [0,0]\n            if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'position',\n                    position: {\n                        x: parent.position.x - xChange + widthChange,\n                        y: parent.position.y - yChange + heightChange,\n                    },\n                });\n                // We move all child nodes in the oppsite direction\n                // so the x,y changes of the parent do not move the children\n                parentLookup.get(parentId)?.forEach((childNode) => {\n                    if (!children.some((child) => child.id === childNode.id)) {\n                        changes.push({\n                            id: childNode.id,\n                            type: 'position',\n                            position: {\n                                x: childNode.position.x + xChange,\n                                y: childNode.position.y + yChange,\n                            },\n                        });\n                    }\n                });\n            }\n            // We need to correct the dimensions of the parent node if the origin is not [0,0]\n            if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'dimensions',\n                    setAttributes: true,\n                    dimensions: {\n                        width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n                        height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0),\n                    },\n                });\n            }\n        });\n    }\n    return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\n    const viewportNode = domNode?.querySelector('.xyflow__viewport');\n    let updatedInternals = false;\n    if (!viewportNode) {\n        return { changes: [], updatedInternals };\n    }\n    const changes = [];\n    const style = window.getComputedStyle(viewportNode);\n    const { m22: zoom } = new window.DOMMatrixReadOnly(style.transform);\n    // in this array we collect nodes, that might trigger changes (like expanding parent)\n    const parentExpandChildren = [];\n    for (const update of updates.values()) {\n        const node = nodeLookup.get(update.id);\n        if (!node) {\n            continue;\n        }\n        if (node.hidden) {\n            node.internals = {\n                ...node.internals,\n                handleBounds: undefined,\n            };\n            updatedInternals = true;\n        }\n        else {\n            const dimensions = getDimensions(update.nodeElement);\n            const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n            const doUpdate = !!(dimensions.width &&\n                dimensions.height &&\n                (dimensionChanged || !node.internals.handleBounds || update.force));\n            if (doUpdate) {\n                const nodeBounds = update.nodeElement.getBoundingClientRect();\n                const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\n                let { positionAbsolute } = node.internals;\n                if (node.parentId && node.extent === 'parent') {\n                    positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\n                }\n                else if (extent) {\n                    positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\n                }\n                node.measured = dimensions;\n                node.internals = {\n                    ...node.internals,\n                    positionAbsolute,\n                    handleBounds: {\n                        source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n                        target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id),\n                    },\n                };\n                if (node.parentId) {\n                    updateChildNode(node, nodeLookup, parentLookup, { nodeOrigin });\n                }\n                updatedInternals = true;\n                if (dimensionChanged) {\n                    changes.push({\n                        id: node.id,\n                        type: 'dimensions',\n                        dimensions,\n                    });\n                    if (node.expandParent && node.parentId) {\n                        parentExpandChildren.push({\n                            id: node.id,\n                            parentId: node.parentId,\n                            rect: nodeToRect(node, nodeOrigin),\n                        });\n                    }\n                }\n            }\n        }\n    }\n    if (parentExpandChildren.length > 0) {\n        const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n        changes.push(...parentExpandChanges);\n    }\n    return { changes, updatedInternals };\n}\nasync function panBy({ delta, panZoom, transform, translateExtent, width, height, }) {\n    if (!panZoom || (!delta.x && !delta.y)) {\n        return Promise.resolve(false);\n    }\n    const nextViewport = await panZoom.setViewportConstrained({\n        x: transform[0] + delta.x,\n        y: transform[1] + delta.y,\n        zoom: transform[2],\n    }, [\n        [0, 0],\n        [width, height],\n    ], translateExtent);\n    const transformChanged = !!nextViewport &&\n        (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n    return Promise.resolve(transformChanged);\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n    connectionLookup.clear();\n    edgeLookup.clear();\n    for (const edge of edges) {\n        const { source, target, sourceHandle = null, targetHandle = null } = edge;\n        const sourceKey = `${source}-source-${sourceHandle}`;\n        const targetKey = `${target}-target-${targetHandle}`;\n        const prevSource = connectionLookup.get(sourceKey) || new Map();\n        const prevTarget = connectionLookup.get(targetKey) || new Map();\n        const connection = { edgeId: edge.id, source, target, sourceHandle, targetHandle };\n        edgeLookup.set(edge.id, edge);\n        connectionLookup.set(sourceKey, prevSource.set(`${target}-${targetHandle}`, connection));\n        connectionLookup.set(targetKey, prevTarget.set(`${source}-${sourceHandle}`, connection));\n    }\n}\n\nfunction shallowNodeData(a, b) {\n    if (a === null || b === null) {\n        return false;\n    }\n    const _a = Array.isArray(a) ? a : [a];\n    const _b = Array.isArray(b) ? b : [b];\n    if (_a.length !== _b.length) {\n        return false;\n    }\n    for (let i = 0; i < _a.length; i++) {\n        if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isParentSelected(node, nodeLookup) {\n    if (!node.parentId) {\n        return false;\n    }\n    const parentNode = nodeLookup.get(node.parentId);\n    if (!parentNode) {\n        return false;\n    }\n    if (parentNode.selected) {\n        return true;\n    }\n    return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n    let current = target;\n    do {\n        if (current?.matches(selector))\n            return true;\n        if (current === domNode)\n            return false;\n        current = current.parentElement;\n    } while (current);\n    return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n    const dragItems = new Map();\n    for (const [id, node] of nodeLookup) {\n        if ((node.selected || node.id === nodeId) &&\n            (!node.parentId || !isParentSelected(node, nodeLookup)) &&\n            (node.draggable || (nodesDraggable && typeof node.draggable === 'undefined'))) {\n            const internalNode = nodeLookup.get(id);\n            if (internalNode) {\n                dragItems.set(id, {\n                    id,\n                    position: internalNode.position || { x: 0, y: 0 },\n                    distance: {\n                        x: mousePos.x - internalNode.internals.positionAbsolute.x,\n                        y: mousePos.y - internalNode.internals.positionAbsolute.y,\n                    },\n                    extent: internalNode.extent,\n                    parentId: internalNode.parentId,\n                    origin: internalNode.origin,\n                    expandParent: internalNode.expandParent,\n                    internals: {\n                        positionAbsolute: internalNode.internals.positionAbsolute || { x: 0, y: 0 },\n                    },\n                    measured: {\n                        width: internalNode.measured.width ?? 0,\n                        height: internalNode.measured.height ?? 0,\n                    },\n                });\n            }\n        }\n    }\n    return dragItems;\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({ nodeId, dragItems, nodeLookup, dragging = true, }) {\n    const nodesFromDragItems = [];\n    for (const [id, dragItem] of dragItems) {\n        const node = nodeLookup.get(id)?.internals.userNode;\n        if (node) {\n            nodesFromDragItems.push({\n                ...node,\n                position: dragItem.position,\n                dragging,\n            });\n        }\n    }\n    if (!nodeId) {\n        return [nodesFromDragItems[0], nodesFromDragItems];\n    }\n    const node = nodeLookup.get(nodeId).internals.userNode;\n    return [\n        {\n            ...node,\n            position: dragItems.get(nodeId)?.position || node.position,\n            dragging,\n        },\n        nodesFromDragItems,\n    ];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({ onNodeMouseDown, getStoreItems, onDragStart, onDrag, onDragStop, }) {\n    let lastPos = { x: null, y: null };\n    let autoPanId = 0;\n    let dragItems = new Map();\n    let autoPanStarted = false;\n    let mousePosition = { x: 0, y: 0 };\n    let containerBounds = null;\n    let dragStarted = false;\n    let d3Selection = null;\n    let abortDrag = false; // prevents unintentional dragging on multitouch\n    // public functions\n    function update({ noDragClassName, handleSelector, domNode, isSelectable, nodeId, nodeClickDistance = 0, }) {\n        d3Selection = select(domNode);\n        function updateNodes({ x, y }, dragEvent) {\n            const { nodeLookup, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onNodeDrag, onSelectionDrag, onError, updateNodePositions, } = getStoreItems();\n            lastPos = { x, y };\n            let hasChange = false;\n            let nodesBox = { x: 0, y: 0, x2: 0, y2: 0 };\n            if (dragItems.size > 1 && nodeExtent) {\n                const rect = getInternalNodesBounds(dragItems);\n                nodesBox = rectToBox(rect);\n            }\n            for (const [id, dragItem] of dragItems) {\n                if (!nodeLookup.has(id)) {\n                    // if the node is not in the nodeLookup anymore, it was probably deleted while dragging\n                    // and we don't need to update it anymore\n                    continue;\n                }\n                let nextPosition = { x: x - dragItem.distance.x, y: y - dragItem.distance.y };\n                if (snapToGrid) {\n                    nextPosition = snapPosition(nextPosition, snapGrid);\n                }\n                // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n                // based on its position so that the node stays at it's position relative to the selection.\n                let adjustedNodeExtent = [\n                    [nodeExtent[0][0], nodeExtent[0][1]],\n                    [nodeExtent[1][0], nodeExtent[1][1]],\n                ];\n                if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n                    const { positionAbsolute } = dragItem.internals;\n                    const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n                    const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n                    const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n                    const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n                    adjustedNodeExtent = [\n                        [x1, y1],\n                        [x2, y2],\n                    ];\n                }\n                const { position, positionAbsolute } = calculateNodePosition({\n                    nodeId: id,\n                    nextPosition,\n                    nodeLookup,\n                    nodeExtent: adjustedNodeExtent,\n                    nodeOrigin,\n                    onError,\n                });\n                // we want to make sure that we only fire a change event when there is a change\n                hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n                dragItem.position = position;\n                dragItem.internals.positionAbsolute = positionAbsolute;\n            }\n            if (!hasChange) {\n                return;\n            }\n            updateNodePositions(dragItems, true);\n            if (dragEvent && (onDrag || onNodeDrag || (!nodeId && onSelectionDrag))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n                onNodeDrag?.(dragEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDrag?.(dragEvent, currentNodes);\n                }\n            }\n        }\n        async function autoPan() {\n            if (!containerBounds) {\n                return;\n            }\n            const { transform, panBy, autoPanSpeed } = getStoreItems();\n            const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n            if (xMovement !== 0 || yMovement !== 0) {\n                lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n                lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n                if (await panBy({ x: xMovement, y: yMovement })) {\n                    updateNodes(lastPos, null);\n                }\n            }\n            autoPanId = requestAnimationFrame(autoPan);\n        }\n        function startDrag(event) {\n            const { nodeLookup, multiSelectionActive, nodesDraggable, transform, snapGrid, snapToGrid, selectNodesOnDrag, onNodeDragStart, onSelectionDragStart, unselectNodesAndEdges, } = getStoreItems();\n            dragStarted = true;\n            if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n                if (!nodeLookup.get(nodeId)?.selected) {\n                    // we need to reset selected nodes when selectNodesOnDrag=false\n                    unselectNodesAndEdges();\n                }\n            }\n            if (isSelectable && selectNodesOnDrag && nodeId) {\n                onNodeMouseDown?.(nodeId);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            lastPos = pointerPos;\n            dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n            if (dragItems.size > 0 && (onDragStart || onNodeDragStart || (!nodeId && onSelectionDragStart))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDragStart?.(event.sourceEvent, currentNodes);\n                }\n            }\n        }\n        const d3DragInstance = drag()\n            .clickDistance(nodeClickDistance)\n            .on('start', (event) => {\n            const { domNode, nodeDragThreshold, transform, snapGrid, snapToGrid } = getStoreItems();\n            abortDrag = false;\n            if (nodeDragThreshold === 0) {\n                startDrag(event);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            lastPos = pointerPos;\n            containerBounds = domNode?.getBoundingClientRect() || null;\n            mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        })\n            .on('drag', (event) => {\n            const { autoPanOnNodeDrag, transform, snapGrid, snapToGrid, nodeDragThreshold, nodeLookup } = getStoreItems();\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            if ((event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1) ||\n                // if user deletes a node while dragging, we need to abort the drag to prevent errors\n                (nodeId && !nodeLookup.has(nodeId))) {\n                abortDrag = true;\n            }\n            if (abortDrag) {\n                return;\n            }\n            if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n                autoPanStarted = true;\n                autoPan();\n            }\n            if (!dragStarted) {\n                const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n                const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n                const distance = Math.sqrt(x * x + y * y);\n                if (distance > nodeDragThreshold) {\n                    startDrag(event);\n                }\n            }\n            // skip events without movement\n            if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n                // dragEvent = event.sourceEvent as MouseEvent;\n                mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n                updateNodes(pointerPos, event.sourceEvent);\n            }\n        })\n            .on('end', (event) => {\n            if (!dragStarted || abortDrag) {\n                return;\n            }\n            autoPanStarted = false;\n            dragStarted = false;\n            cancelAnimationFrame(autoPanId);\n            if (dragItems.size > 0) {\n                const { nodeLookup, updateNodePositions, onNodeDragStop, onSelectionDragStop } = getStoreItems();\n                updateNodePositions(dragItems, false);\n                if (onDragStop || onNodeDragStop || (!nodeId && onSelectionDragStop)) {\n                    const [currentNode, currentNodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems,\n                        nodeLookup,\n                        dragging: false,\n                    });\n                    onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                    onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n                    if (!nodeId) {\n                        onSelectionDragStop?.(event.sourceEvent, currentNodes);\n                    }\n                }\n            }\n        })\n            .filter((event) => {\n            const target = event.target;\n            const isDraggable = !event.button &&\n                (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) &&\n                (!handleSelector || hasSelector(target, handleSelector, domNode));\n            return isDraggable;\n        });\n        d3Selection.call(d3DragInstance);\n    }\n    function destroy() {\n        d3Selection?.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\n    const nodes = [];\n    const rect = {\n        x: position.x - distance,\n        y: position.y - distance,\n        width: distance * 2,\n        height: distance * 2,\n    };\n    for (const node of nodeLookup.values()) {\n        if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n// this distance is used for the area around the user pointer\n// while doing a connection for finding the closest nodes\nconst ADDITIONAL_DISTANCE = 250;\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\n    let closestHandles = [];\n    let minDistance = Infinity;\n    const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\n    for (const node of closeNodes) {\n        const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n        for (const handle of allHandles) {\n            // if the handle is the same as the fromHandle we skip it\n            if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\n                continue;\n            }\n            // determine absolute position of the handle\n            const { x, y } = getHandlePosition(node, handle, handle.position, true);\n            const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\n            if (distance > connectionRadius) {\n                continue;\n            }\n            if (distance < minDistance) {\n                closestHandles = [{ ...handle, x, y }];\n                minDistance = distance;\n            }\n            else if (distance === minDistance) {\n                // when multiple handles are on the same distance we collect all of them\n                closestHandles.push({ ...handle, x, y });\n            }\n        }\n    }\n    if (!closestHandles.length) {\n        return null;\n    }\n    // when multiple handles overlay each other we prefer the opposite handle\n    if (closestHandles.length > 1) {\n        const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\n        return closestHandles.find((handle) => handle.type === oppositeHandleType) ?? closestHandles[0];\n    }\n    return closestHandles[0];\n}\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {\n    const node = nodeLookup.get(nodeId);\n    if (!node) {\n        return null;\n    }\n    const handles = connectionMode === 'strict'\n        ? node.internals.handleBounds?.[handleType]\n        : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n    const handle = (handleId ? handles?.find((h) => h.id === handleId) : handles?.[0]) ?? null;\n    return handle && withAbsolutePosition\n        ? { ...handle, ...getHandlePosition(node, handle, handle.position, true) }\n        : handle;\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n    if (edgeUpdaterType) {\n        return edgeUpdaterType;\n    }\n    else if (handleDomNode?.classList.contains('target')) {\n        return 'target';\n    }\n    else if (handleDomNode?.classList.contains('source')) {\n        return 'source';\n    }\n    return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n    let isValid = null;\n    if (isHandleValid) {\n        isValid = true;\n    }\n    else if (isInsideConnectionRadius && !isHandleValid) {\n        isValid = false;\n    }\n    return isValid;\n}\n\nconst alwaysValid = () => true;\nfunction onPointerDown(event, { connectionMode, connectionRadius, handleId, nodeId, edgeUpdaterType, isTarget, domNode, nodeLookup, lib, autoPanOnConnect, flowId, panBy, cancelConnection, onConnectStart, onConnect, onConnectEnd, isValidConnection = alwaysValid, onReconnectEnd, updateConnection, getTransform, getFromHandle, autoPanSpeed, }) {\n    // when xyflow is used inside a shadow root we can't use document\n    const doc = getHostForElement(event.target);\n    let autoPanId = 0;\n    let closestHandle;\n    const { x, y } = getEventPosition(event);\n    const clickedHandle = doc?.elementFromPoint(x, y);\n    const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n    const containerBounds = domNode?.getBoundingClientRect();\n    if (!containerBounds || !handleType) {\n        return;\n    }\n    const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\n    if (!fromHandleInternal) {\n        return;\n    }\n    let position = getEventPosition(event, containerBounds);\n    let autoPanStarted = false;\n    let connection = null;\n    let isValid = false;\n    let handleDomNode = null;\n    // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n    function autoPan() {\n        if (!autoPanOnConnect || !containerBounds) {\n            return;\n        }\n        const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n        panBy({ x, y });\n        autoPanId = requestAnimationFrame(autoPan);\n    }\n    // Stays the same for all consecutive pointermove events\n    const fromHandle = {\n        ...fromHandleInternal,\n        nodeId,\n        type: handleType,\n        position: fromHandleInternal.position,\n    };\n    const fromNodeInternal = nodeLookup.get(nodeId);\n    const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n    const newConnection = {\n        inProgress: true,\n        isValid: null,\n        from,\n        fromHandle,\n        fromPosition: fromHandle.position,\n        fromNode: fromNodeInternal,\n        to: position,\n        toHandle: null,\n        toPosition: oppositePosition[fromHandle.position],\n        toNode: null,\n    };\n    updateConnection(newConnection);\n    let previousConnection = newConnection;\n    onConnectStart?.(event, { nodeId, handleId, handleType });\n    function onPointerMove(event) {\n        if (!getFromHandle() || !fromHandle) {\n            onPointerUp(event);\n            return;\n        }\n        const transform = getTransform();\n        position = getEventPosition(event, containerBounds);\n        closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\n        if (!autoPanStarted) {\n            autoPan();\n            autoPanStarted = true;\n        }\n        const result = isValidHandle(event, {\n            handle: closestHandle,\n            connectionMode,\n            fromNodeId: nodeId,\n            fromHandleId: handleId,\n            fromType: isTarget ? 'target' : 'source',\n            isValidConnection,\n            doc,\n            lib,\n            flowId,\n            nodeLookup,\n        });\n        handleDomNode = result.handleDomNode;\n        connection = result.connection;\n        isValid = isConnectionValid(!!closestHandle, result.isValid);\n        const newConnection = {\n            // from stays the same\n            ...previousConnection,\n            isValid,\n            to: closestHandle && isValid\n                ? rendererPointToPoint({ x: closestHandle.x, y: closestHandle.y }, transform)\n                : position,\n            toHandle: result.toHandle,\n            toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n            toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null,\n        };\n        // we don't want to trigger an update when the connection\n        // is snapped to the same handle as before\n        if (isValid &&\n            closestHandle &&\n            previousConnection.toHandle &&\n            newConnection.toHandle &&\n            previousConnection.toHandle.type === newConnection.toHandle.type &&\n            previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId &&\n            previousConnection.toHandle.id === newConnection.toHandle.id &&\n            previousConnection.to.x === newConnection.to.x &&\n            previousConnection.to.y === newConnection.to.y) {\n            return;\n        }\n        updateConnection(newConnection);\n        previousConnection = newConnection;\n    }\n    function onPointerUp(event) {\n        if ((closestHandle || handleDomNode) && connection && isValid) {\n            onConnect?.(connection);\n        }\n        // it's important to get a fresh reference from the store here\n        // in order to get the latest state of onConnectEnd\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { inProgress, ...connectionState } = previousConnection;\n        const finalConnectionState = {\n            ...connectionState,\n            toPosition: previousConnection.toHandle ? previousConnection.toPosition : null,\n        };\n        onConnectEnd?.(event, finalConnectionState);\n        if (edgeUpdaterType) {\n            onReconnectEnd?.(event, finalConnectionState);\n        }\n        cancelConnection();\n        cancelAnimationFrame(autoPanId);\n        autoPanStarted = false;\n        isValid = false;\n        connection = null;\n        handleDomNode = null;\n        doc.removeEventListener('mousemove', onPointerMove);\n        doc.removeEventListener('mouseup', onPointerUp);\n        doc.removeEventListener('touchmove', onPointerMove);\n        doc.removeEventListener('touchend', onPointerUp);\n    }\n    doc.addEventListener('mousemove', onPointerMove);\n    doc.addEventListener('mouseup', onPointerUp);\n    doc.addEventListener('touchmove', onPointerMove);\n    doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, { handle, connectionMode, fromNodeId, fromHandleId, fromType, doc, lib, flowId, isValidConnection = alwaysValid, nodeLookup, }) {\n    const isTarget = fromType === 'target';\n    const handleDomNode = handle\n        ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`)\n        : null;\n    const { x, y } = getEventPosition(event);\n    const handleBelow = doc.elementFromPoint(x, y);\n    // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n    // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n    const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n    const result = {\n        handleDomNode: handleToCheck,\n        isValid: false,\n        connection: null,\n        toHandle: null,\n    };\n    if (handleToCheck) {\n        const handleType = getHandleType(undefined, handleToCheck);\n        const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n        const handleId = handleToCheck.getAttribute('data-handleid');\n        const connectable = handleToCheck.classList.contains('connectable');\n        const connectableEnd = handleToCheck.classList.contains('connectableend');\n        if (!handleNodeId || !handleType) {\n            return result;\n        }\n        const connection = {\n            source: isTarget ? handleNodeId : fromNodeId,\n            sourceHandle: isTarget ? handleId : fromHandleId,\n            target: isTarget ? fromNodeId : handleNodeId,\n            targetHandle: isTarget ? fromHandleId : handleId,\n        };\n        result.connection = connection;\n        const isConnectable = connectable && connectableEnd;\n        // in strict mode we don't allow target to target or source to source connections\n        const isValid = isConnectable &&\n            (connectionMode === ConnectionMode.Strict\n                ? (isTarget && handleType === 'source') || (!isTarget && handleType === 'target')\n                : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n        result.isValid = isValid && isValidConnection(connection);\n        result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\n    }\n    return result;\n}\nconst XYHandle = {\n    onPointerDown,\n    isValid: isValidHandle,\n};\n\nfunction XYMinimap({ domNode, panZoom, getTransform, getViewScale }) {\n    const selection = select(domNode);\n    function update({ translateExtent, width, height, zoomStep = 10, pannable = true, zoomable = true, inversePan = false, }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const zoomHandler = (event) => {\n            const transform = getTransform();\n            if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n                return;\n            }\n            const pinchDelta = -event.sourceEvent.deltaY *\n                (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) *\n                zoomStep;\n            const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n            panZoom.scaleTo(nextZoom);\n        };\n        let panStart = [0, 0];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panStartHandler = (event) => {\n            if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n                panStart = [\n                    event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                    event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n                ];\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panHandler = (event) => {\n            const transform = getTransform();\n            if ((event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove') || !panZoom) {\n                return;\n            }\n            const panCurrent = [\n                event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n            ];\n            const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n            panStart = panCurrent;\n            const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n            const position = {\n                x: transform[0] - panDelta[0] * moveScale,\n                y: transform[1] - panDelta[1] * moveScale,\n            };\n            const extent = [\n                [0, 0],\n                [width, height],\n            ];\n            panZoom.setViewportConstrained({\n                x: position.x,\n                y: position.y,\n                zoom: transform[2],\n            }, extent, translateExtent);\n        };\n        const zoomAndPanHandler = zoom()\n            .on('start', panStartHandler)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom', pannable ? panHandler : null)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom.wheel', zoomable ? zoomHandler : null);\n        selection.call(zoomAndPanHandler, {});\n    }\n    function destroy() {\n        selection.on('zoom', null);\n    }\n    return {\n        update,\n        destroy,\n        pointer,\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = (transform) => ({\n    x: transform.x,\n    y: transform.y,\n    zoom: transform.k,\n});\nconst viewportToTransform = ({ x, y, zoom }) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => { }) => {\n    const hasDuration = typeof duration === 'number' && duration > 0;\n    if (!hasDuration) {\n        onEnd();\n    }\n    return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = (event) => {\n    const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\n\nfunction createPanOnScrollHandler({ zoomPanValues, noWheelClassName, d3Selection, d3Zoom, panOnScrollMode, panOnScrollSpeed, zoomOnPinch, onPanZoomStart, onPanZoom, onPanZoomEnd, }) {\n    return (event) => {\n        if (isWrappedWithClass(event, noWheelClassName)) {\n            return false;\n        }\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        const currentZoom = d3Selection.property('__zoom').k || 1;\n        // macos sets ctrlKey=true for pinch gesture on a trackpad\n        if (event.ctrlKey && zoomOnPinch) {\n            const point = pointer(event);\n            const pinchDelta = wheelDelta(event);\n            const zoom = currentZoom * Math.pow(2, pinchDelta);\n            // @ts-ignore\n            d3Zoom.scaleTo(d3Selection, zoom, point, event);\n            return;\n        }\n        // increase scroll speed in firefox\n        // firefox: deltaMode === 1; chrome: deltaMode === 0\n        const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n        let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n        let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n        // this enables vertical scrolling with shift + scroll on windows\n        if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n            deltaX = event.deltaY * deltaNormalize;\n            deltaY = 0;\n        }\n        d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed, \n        // @ts-ignore\n        { internal: true });\n        const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n        clearTimeout(zoomPanValues.panScrollTimeout);\n        // for pan on scroll we need to handle the event calls on our own\n        // we can't use the start, zoom and end events from d3-zoom\n        // because start and move gets called on every scroll event and not once at the beginning\n        if (!zoomPanValues.isPanScrolling) {\n            zoomPanValues.isPanScrolling = true;\n            onPanZoomStart?.(event, nextViewport);\n        }\n        if (zoomPanValues.isPanScrolling) {\n            onPanZoom?.(event, nextViewport);\n            zoomPanValues.panScrollTimeout = setTimeout(() => {\n                onPanZoomEnd?.(event, nextViewport);\n                zoomPanValues.isPanScrolling = false;\n            }, 150);\n        }\n    };\n}\nfunction createZoomOnScrollHandler({ noWheelClassName, preventScrolling, d3ZoomHandler }) {\n    return function (event, d) {\n        // we still want to enable pinch zooming even if preventScrolling is set to false\n        const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n        if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\n            return null;\n        }\n        event.preventDefault();\n        d3ZoomHandler.call(this, event, d);\n    };\n}\nfunction createPanZoomStartHandler({ zoomPanValues, onDraggingChange, onPanZoomStart }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        const viewport = transformToViewport(event.transform);\n        // we need to remember it here, because it's always 0 in the \"zoom\" event\n        zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n        zoomPanValues.isZoomingOrPanning = true;\n        zoomPanValues.prevViewport = viewport;\n        if (event.sourceEvent?.type === 'mousedown') {\n            onDraggingChange(true);\n        }\n        if (onPanZoomStart) {\n            onPanZoomStart?.(event.sourceEvent, viewport);\n        }\n    };\n}\nfunction createPanZoomHandler({ zoomPanValues, panOnDrag, onPaneContextMenu, onTransformChange, onPanZoom, }) {\n    return (event) => {\n        zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n        if (!event.sourceEvent?.sync) {\n            onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n        }\n        if (onPanZoom && !event.sourceEvent?.internal) {\n            onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n        }\n    };\n}\nfunction createPanZoomEndHandler({ zoomPanValues, panOnDrag, panOnScroll, onDraggingChange, onPanZoomEnd, onPaneContextMenu, }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        zoomPanValues.isZoomingOrPanning = false;\n        if (onPaneContextMenu &&\n            isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) &&\n            !zoomPanValues.usedRightMouseButton &&\n            event.sourceEvent) {\n            onPaneContextMenu(event.sourceEvent);\n        }\n        zoomPanValues.usedRightMouseButton = false;\n        onDraggingChange(false);\n        if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n            const viewport = transformToViewport(event.transform);\n            zoomPanValues.prevViewport = viewport;\n            clearTimeout(zoomPanValues.timerId);\n            zoomPanValues.timerId = setTimeout(() => {\n                onPanZoomEnd?.(event.sourceEvent, viewport);\n            }, \n            // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n            panOnScroll ? 150 : 0);\n        }\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({ zoomActivationKeyPressed, zoomOnScroll, zoomOnPinch, panOnDrag, panOnScroll, zoomOnDoubleClick, userSelectionActive, noWheelClassName, noPanClassName, lib, }) {\n    return (event) => {\n        const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n        const pinchZoom = zoomOnPinch && event.ctrlKey;\n        if (event.button === 1 &&\n            event.type === 'mousedown' &&\n            (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n            return true;\n        }\n        // if all interactions are disabled, we prevent all zoom events\n        if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n            return false;\n        }\n        // during a selection we prevent all other interactions\n        if (userSelectionActive) {\n            return false;\n        }\n        // if the target element is inside an element with the nowheel class, we prevent zooming\n        if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n            return false;\n        }\n        // if the target element is inside an element with the nopan class, we prevent panning\n        if (isWrappedWithClass(event, noPanClassName) &&\n            (event.type !== 'wheel' || (panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed))) {\n            return false;\n        }\n        if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n            return false;\n        }\n        if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n            event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n            return false;\n        }\n        // when there is no scroll handling enabled, we prevent all wheel events\n        if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n            return false;\n        }\n        // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n        if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n            return false;\n        }\n        // if the pane is only movable using allowed clicks\n        if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n            return false;\n        }\n        // We only allow right clicks if pan on drag is set to right click\n        const buttonAllowed = (Array.isArray(panOnDrag) && panOnDrag.includes(event.button)) || !event.button || event.button <= 1;\n        // default filter for d3-zoom\n        return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n    };\n}\n\nfunction XYPanZoom({ domNode, minZoom, maxZoom, paneClickDistance, translateExtent, viewport, onPanZoom, onPanZoomStart, onPanZoomEnd, onDraggingChange, }) {\n    const zoomPanValues = {\n        isZoomingOrPanning: false,\n        usedRightMouseButton: false,\n        prevViewport: { x: 0, y: 0, zoom: 0 },\n        mouseButton: 0,\n        timerId: undefined,\n        panScrollTimeout: undefined,\n        isPanScrolling: false,\n    };\n    const bbox = domNode.getBoundingClientRect();\n    const d3ZoomInstance = zoom()\n        .clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance)\n        .scaleExtent([minZoom, maxZoom])\n        .translateExtent(translateExtent);\n    const d3Selection = select(domNode).call(d3ZoomInstance);\n    setViewportConstrained({\n        x: viewport.x,\n        y: viewport.y,\n        zoom: clamp(viewport.zoom, minZoom, maxZoom),\n    }, [\n        [0, 0],\n        [bbox.width, bbox.height],\n    ], translateExtent);\n    const d3ZoomHandler = d3Selection.on('wheel.zoom');\n    const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n    d3ZoomInstance.wheelDelta(wheelDelta);\n    function setTransform(transform, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    // public functions\n    function update({ noWheelClassName, noPanClassName, onPaneContextMenu, userSelectionActive, panOnScroll, panOnDrag, panOnScrollMode, panOnScrollSpeed, preventScrolling, zoomOnPinch, zoomOnScroll, zoomOnDoubleClick, zoomActivationKeyPressed, lib, onTransformChange, }) {\n        if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n            destroy();\n        }\n        const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n        const wheelHandler = isPanOnScroll\n            ? createPanOnScrollHandler({\n                zoomPanValues,\n                noWheelClassName,\n                d3Selection,\n                d3Zoom: d3ZoomInstance,\n                panOnScrollMode,\n                panOnScrollSpeed,\n                zoomOnPinch,\n                onPanZoomStart,\n                onPanZoom,\n                onPanZoomEnd,\n            })\n            : createZoomOnScrollHandler({\n                noWheelClassName,\n                preventScrolling,\n                d3ZoomHandler,\n            });\n        d3Selection.on('wheel.zoom', wheelHandler, { passive: false });\n        if (!userSelectionActive) {\n            // pan zoom start\n            const startHandler = createPanZoomStartHandler({\n                zoomPanValues,\n                onDraggingChange,\n                onPanZoomStart,\n            });\n            d3ZoomInstance.on('start', startHandler);\n            // pan zoom\n            const panZoomHandler = createPanZoomHandler({\n                zoomPanValues,\n                panOnDrag,\n                onPaneContextMenu: !!onPaneContextMenu,\n                onPanZoom,\n                onTransformChange,\n            });\n            d3ZoomInstance.on('zoom', panZoomHandler);\n            // pan zoom end\n            const panZoomEndHandler = createPanZoomEndHandler({\n                zoomPanValues,\n                panOnDrag,\n                panOnScroll,\n                onPaneContextMenu,\n                onPanZoomEnd,\n                onDraggingChange,\n            });\n            d3ZoomInstance.on('end', panZoomEndHandler);\n        }\n        const filter = createFilter({\n            zoomActivationKeyPressed,\n            panOnDrag,\n            zoomOnScroll,\n            panOnScroll,\n            zoomOnDoubleClick,\n            zoomOnPinch,\n            userSelectionActive,\n            noPanClassName,\n            noWheelClassName,\n            lib,\n        });\n        d3ZoomInstance.filter(filter);\n        // We cannot add zoomOnDoubleClick to the filter above because\n        // double tapping on touch screens circumvents the filter and\n        // dblclick.zoom is fired on the selection directly\n        if (zoomOnDoubleClick) {\n            d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n        }\n        else {\n            d3Selection.on('dblclick.zoom', null);\n        }\n    }\n    function destroy() {\n        d3ZoomInstance.on('zoom', null);\n    }\n    async function setViewportConstrained(viewport, extent, translateExtent) {\n        const nextTransform = viewportToTransform(viewport);\n        const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n        if (contrainedTransform) {\n            await setTransform(contrainedTransform);\n        }\n        return new Promise((resolve) => resolve(contrainedTransform));\n    }\n    async function setViewport(viewport, options) {\n        const nextTransform = viewportToTransform(viewport);\n        await setTransform(nextTransform, options);\n        return new Promise((resolve) => resolve(nextTransform));\n    }\n    function syncViewport(viewport) {\n        if (d3Selection) {\n            const nextTransform = viewportToTransform(viewport);\n            const currentTransform = d3Selection.property('__zoom');\n            if (currentTransform.k !== viewport.zoom ||\n                currentTransform.x !== viewport.x ||\n                currentTransform.y !== viewport.y) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                d3ZoomInstance?.transform(d3Selection, nextTransform, null, { sync: true });\n            }\n        }\n    }\n    function getViewport() {\n        const transform = d3Selection ? zoomTransform(d3Selection.node()) : { x: 0, y: 0, k: 1 };\n        return { x: transform.x, y: transform.y, zoom: transform.k };\n    }\n    function scaleTo(zoom, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function scaleBy(factor, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function setScaleExtent(scaleExtent) {\n        d3ZoomInstance?.scaleExtent(scaleExtent);\n    }\n    function setTranslateExtent(translateExtent) {\n        d3ZoomInstance?.translateExtent(translateExtent);\n    }\n    function setClickDistance(distance) {\n        const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n        d3ZoomInstance?.clickDistance(validDistance);\n    }\n    return {\n        update,\n        destroy,\n        setViewport,\n        setViewportConstrained,\n        getViewport,\n        scaleTo,\n        scaleBy,\n        setScaleExtent,\n        setTranslateExtent,\n        syncViewport,\n        setClickDistance,\n    };\n}\n\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n    ResizeControlVariant[\"Line\"] = \"line\";\n    ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection({ width, prevWidth, height, prevHeight, affectsX, affectsY, }) {\n    const deltaWidth = width - prevWidth;\n    const deltaHeight = height - prevHeight;\n    const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n    if (deltaWidth && affectsX) {\n        direction[0] = direction[0] * -1;\n    }\n    if (deltaHeight && affectsY) {\n        direction[1] = direction[1] * -1;\n    }\n    return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n    const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n    const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n    const affectsX = controlPosition.includes('left');\n    const affectsY = controlPosition.includes('top');\n    return {\n        isHorizontal,\n        isVertical,\n        affectsX,\n        affectsY,\n    };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n    return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n    return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n    return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n    return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n    let { affectsX, affectsY } = controlDirection;\n    const { isHorizontal, isVertical } = controlDirection;\n    const isDiagonal = isHorizontal && isVertical;\n    const { xSnapped, ySnapped } = pointerPosition;\n    const { minWidth, maxWidth, minHeight, maxHeight } = boundaries;\n    const { x: startX, y: startY, width: startWidth, height: startHeight, aspectRatio } = startValues;\n    let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n    let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n    const newWidth = startWidth + (affectsX ? -distX : distX);\n    const newHeight = startHeight + (affectsY ? -distY : distY);\n    const originOffsetX = -nodeOrigin[0] * startWidth;\n    const originOffsetY = -nodeOrigin[1] * startHeight;\n    // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n    let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n    let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n    // Check if extent is restricting the resize\n    if (extent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n        }\n        else if (!affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n        }\n        if (affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n        }\n        else if (!affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the child extent is restricting the resize\n    if (childExtent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n        }\n        else if (!affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n        }\n        if (affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n        }\n        else if (!affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the aspect ratio resizing of the other side is restricting the resize\n    if (keepAspectRatio) {\n        if (isHorizontal) {\n            // Check if the max dimensions might be restricting the resize\n            const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n            clampX = Math.max(clampX, aspectHeightClamp);\n            // Check if the extent is restricting the resize\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) *\n                            aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n            // Check if the child extent is restricting the resize\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n        }\n        // Do the same thing for vertical resizing\n        if (isVertical) {\n            const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n            clampY = Math.max(clampY, aspectWidthClamp);\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) /\n                            aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n        }\n    }\n    distY = distY + (distY < 0 ? clampY : -clampY);\n    distX = distX + (distX < 0 ? clampX : -clampX);\n    if (keepAspectRatio) {\n        if (isDiagonal) {\n            if (newWidth > newHeight * aspectRatio) {\n                distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n            }\n            else {\n                distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n            }\n        }\n        else {\n            if (isHorizontal) {\n                distY = distX / aspectRatio;\n                affectsY = affectsX;\n            }\n            else {\n                distX = distY * aspectRatio;\n                affectsX = affectsY;\n            }\n        }\n    }\n    const x = affectsX ? startX + distX : startX;\n    const y = affectsY ? startY + distY : startY;\n    return {\n        width: startWidth + (affectsX ? -distX : distX),\n        height: startHeight + (affectsY ? -distY : distY),\n        x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n        y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y,\n    };\n}\n\nconst initPrevValues = { width: 0, height: 0, x: 0, y: 0 };\nconst initStartValues = {\n    ...initPrevValues,\n    pointerX: 0,\n    pointerY: 0,\n    aspectRatio: 1,\n};\nfunction nodeToParentExtent(node) {\n    return [\n        [0, 0],\n        [node.measured.width, node.measured.height],\n    ];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n    const x = parent.position.x + child.position.x;\n    const y = parent.position.y + child.position.y;\n    const width = child.measured.width ?? 0;\n    const height = child.measured.height ?? 0;\n    const originOffsetX = nodeOrigin[0] * width;\n    const originOffsetY = nodeOrigin[1] * height;\n    return [\n        [x - originOffsetX, y - originOffsetY],\n        [x + width - originOffsetX, y + height - originOffsetY],\n    ];\n}\nfunction XYResizer({ domNode, nodeId, getStoreItems, onChange, onEnd }) {\n    const selection = select(domNode);\n    function update({ controlPosition, boundaries, keepAspectRatio, onResizeStart, onResize, onResizeEnd, shouldResize, }) {\n        let prevValues = { ...initPrevValues };\n        let startValues = { ...initStartValues };\n        const controlDirection = getControlDirection(controlPosition);\n        let node = undefined;\n        let childNodes = [];\n        let parentNode = undefined; // Needed to fix expandParent\n        let parentExtent = undefined;\n        let childExtent = undefined;\n        const dragHandler = drag()\n            .on('start', (event) => {\n            const { nodeLookup, transform, snapGrid, snapToGrid, nodeOrigin } = getStoreItems();\n            node = nodeLookup.get(nodeId);\n            if (!node) {\n                return;\n            }\n            const { xSnapped, ySnapped } = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            prevValues = {\n                width: node.measured.width ?? 0,\n                height: node.measured.height ?? 0,\n                x: node.position.x ?? 0,\n                y: node.position.y ?? 0,\n            };\n            startValues = {\n                ...prevValues,\n                pointerX: xSnapped,\n                pointerY: ySnapped,\n                aspectRatio: prevValues.width / prevValues.height,\n            };\n            parentNode = undefined;\n            if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n                parentNode = nodeLookup.get(node.parentId);\n                parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n            }\n            // Collect all child nodes to correct their relative positions when top/left changes\n            // Determine largest minimal extent the parent node is allowed to resize to\n            childNodes = [];\n            childExtent = undefined;\n            for (const [childId, child] of nodeLookup) {\n                if (child.parentId === nodeId) {\n                    childNodes.push({\n                        id: childId,\n                        position: { ...child.position },\n                        extent: child.extent,\n                    });\n                    if (child.extent === 'parent' || child.expandParent) {\n                        const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n                        if (childExtent) {\n                            childExtent = [\n                                [Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])],\n                                [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])],\n                            ];\n                        }\n                        else {\n                            childExtent = extent;\n                        }\n                    }\n                }\n            }\n            onResizeStart?.(event, { ...prevValues });\n        })\n            .on('drag', (event) => {\n            const { transform, snapGrid, snapToGrid, nodeOrigin: storeNodeOrigin } = getStoreItems();\n            const pointerPosition = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            const childChanges = [];\n            if (!node) {\n                return;\n            }\n            const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues;\n            const change = {};\n            const nodeOrigin = node.origin ?? storeNodeOrigin;\n            const { width, height, x, y } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n            const isWidthChange = width !== prevWidth;\n            const isHeightChange = height !== prevHeight;\n            const isXPosChange = x !== prevX && isWidthChange;\n            const isYPosChange = y !== prevY && isHeightChange;\n            if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n                return;\n            }\n            if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n                change.x = isXPosChange ? x : prevValues.x;\n                change.y = isYPosChange ? y : prevValues.y;\n                prevValues.x = change.x;\n                prevValues.y = change.y;\n                // when top/left changes, correct the relative positions of child nodes\n                // so that they stay in the same position\n                if (childNodes.length > 0) {\n                    const xChange = x - prevX;\n                    const yChange = y - prevY;\n                    for (const childNode of childNodes) {\n                        childNode.position = {\n                            x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n                            y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight),\n                        };\n                        childChanges.push(childNode);\n                    }\n                }\n            }\n            if (isWidthChange || isHeightChange) {\n                change.width = isWidthChange ? width : prevValues.width;\n                change.height = isHeightChange ? height : prevValues.height;\n                prevValues.width = change.width;\n                prevValues.height = change.height;\n            }\n            // Fix expandParent when resizing from top/left\n            if (parentNode && node.expandParent) {\n                const xLimit = nodeOrigin[0] * (change.width ?? 0);\n                if (change.x && change.x < xLimit) {\n                    prevValues.x = xLimit;\n                    startValues.x = startValues.x - (change.x - xLimit);\n                }\n                const yLimit = nodeOrigin[1] * (change.height ?? 0);\n                if (change.y && change.y < yLimit) {\n                    prevValues.y = yLimit;\n                    startValues.y = startValues.y - (change.y - yLimit);\n                }\n            }\n            const direction = getResizeDirection({\n                width: prevValues.width,\n                prevWidth,\n                height: prevValues.height,\n                prevHeight,\n                affectsX: controlDirection.affectsX,\n                affectsY: controlDirection.affectsY,\n            });\n            const nextValues = { ...prevValues, direction };\n            const callResize = shouldResize?.(event, nextValues);\n            if (callResize === false) {\n                return;\n            }\n            onResize?.(event, nextValues);\n            onChange(change, childChanges);\n        })\n            .on('end', (event) => {\n            onResizeEnd?.(event, { ...prevValues });\n            onEnd?.();\n        });\n        selection.call(dragHandler);\n    }\n    function destroy() {\n        selection.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}